{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Branch Classifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%load_ext autoreload\n",
    "%autoreload 2\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import cProfile\n",
    "from datetime import datetime\n",
    "from glob import glob\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import os\n",
    "import pandas as pd\n",
    "import pstats\n",
    "import scipy.ndimage\n",
    "from scipy.ndimage import gaussian_filter, median_filter, binary_opening, binary_closing\n",
    "from scipy.ndimage import binary_dilation, generate_binary_structure, map_coordinates\n",
    "import sys\n",
    "import tifffile as tf\n",
    "import torch\n",
    "from torch.utils.data import DataLoader\n",
    "\n",
    "sys.path.append(\"../\")\n",
    "from data_prep import collect, load, draw, save, image\n",
    "from data_prep.image import Image\n",
    "from solvers import branch_classifier\n",
    "import models\n",
    "date = datetime.now().strftime(\"%m-%d-%y\")\n",
    "dtype = torch.float32\n",
    "DEVICE = \"cuda\" if torch.cuda.is_available() else \"cpu\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Collect branch classifier training data\n",
    "Training data consists of volumetric image patches chosen randomly from the neuron node coordinates given\\\n",
    "in the SWC file with an added small random translation. Image patches are labeled 1 if they are centered on\\\n",
    " a branch point and 0 otherwise."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Get sample points from swc files then save sample spherical patches"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load SWC file data into python lists\n",
    "swc_dir = os.path.expanduser(\"~/data/gold166_swc_scaled\")\n",
    "swc_files = os.listdir(swc_dir)\n",
    "\n",
    "img_dir = os.path.expanduser(\"~/data/gold166_tifs_scaled/\")\n",
    "img_files = os.listdir(img_dir)\n",
    "\n",
    "out_dir = os.path.expanduser(\"~/data/gold166_classifier_data/\")\n",
    "if not os.path.exists(out_dir):\n",
    "    os.makedirs(out_dir, exist_ok=True)\n",
    "    print(f\"Created directory: {out_dir}\")\n",
    "if not os.path.exists(os.path.join(out_dir, \"observations\")):\n",
    "    os.makedirs(os.path.join(out_dir, \"observations\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         3267202 function calls (3180980 primitive calls) in 212.060 seconds\n",
      "\n",
      "   Ordered by: cumulative time\n",
      "\n",
      "   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n",
      "        1    0.690    0.690  212.060  212.060 /home/bgray/neurotrack/notebooks/../data_prep/collect.py:152(spherical_patch_dataset)\n",
      "        1    4.293    4.293  167.503  167.503 /home/bgray/neurotrack/notebooks/../data_prep/collect.py:109(save_spherical_patches)\n",
      "    10800    9.756    0.001  101.810    0.009 /home/bgray/neurotrack/notebooks/../data_prep/image.py:71(extract_spherical_patch)\n",
      "    10800    0.160    0.000   84.903    0.008 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_interpolation.py:358(map_coordinates)\n",
      "    10800   83.974    0.008   83.974    0.008 {built-in method scipy.ndimage._nd_image.geometric_transform}\n",
      "      100    0.003    0.000   59.254    0.593 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:333(save)\n",
      "      100   57.322    0.573   57.336    0.573 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:450(_save)\n",
      "        2    0.000    0.000   18.820    9.410 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:978(imread)\n",
      "        2    0.000    0.000   18.409    9.204 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4172(asarray)\n",
      "        2    0.000    0.000   18.368    9.184 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14261(read_array)\n",
      "        2   18.368    9.184   18.368    9.184 {method 'readinto' of '_io.BufferedReader' objects}\n",
      "195434/109706    1.717    0.000   13.862    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}\n",
      "        1    1.855    1.855   10.627   10.627 /home/bgray/neurotrack/notebooks/../data_prep/collect.py:64(random_points_from_mask)\n",
      "        1    0.265    0.265    8.911    8.911 /home/bgray/neurotrack/notebooks/../data_prep/draw.py:12(draw_neuron_density)\n",
      "    29773    0.036    0.000    8.669    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:51(_wrapfunc)\n",
      "        2    0.000    0.000    8.558    4.279 <__array_function__ internals>:177(argwhere)\n",
      "        2    0.000    0.000    8.558    4.279 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numeric.py:578(argwhere)\n",
      "        2    0.000    0.000    8.555    4.278 <__array_function__ internals>:177(nonzero)\n",
      "        2    0.000    0.000    8.555    4.278 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:1892(nonzero)\n",
      "        2    8.554    4.277    8.555    4.278 {method 'nonzero' of 'torch._C._TensorBase' objects}\n",
      "     6323    0.343    0.000    8.159    0.001 /home/bgray/neurotrack/notebooks/../data_prep/image.py:234(draw_line_segment)\n",
      "     6323    0.831    0.000    6.942    0.001 /home/bgray/neurotrack/notebooks/../data_prep/image.py:22(draw_line_segment)\n",
      "        1    4.607    4.607    5.208    5.208 /home/bgray/neurotrack/notebooks/../data_prep/draw.py:47(draw_neuron_mask)\n",
      "     6323    0.084    0.000    4.291    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/skimage/_shared/filters.py:35(gaussian)\n",
      "     6323    0.067    0.000    3.900    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_filters.py:279(gaussian_filter)\n",
      "    67700    3.877    0.000    3.877    0.000 {built-in method numpy.array}\n",
      "    18969    0.063    0.000    3.631    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_filters.py:211(gaussian_filter1d)\n",
      "    18969    0.113    0.000    3.173    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_filters.py:84(correlate1d)\n",
      "    18969    2.963    0.000    2.963    0.000 {built-in method scipy.ndimage._nd_image.correlate1d}\n",
      "    10800    0.033    0.000    1.909    0.000 <__array_function__ internals>:177(meshgrid)\n",
      "    10800    0.123    0.000    1.842    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:4892(meshgrid)\n",
      "      100    0.000    0.000    1.594    0.016 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:213(__exit__)\n",
      "      100    1.593    0.016    1.593    0.016 {method 'close' of '_io.BufferedWriter' objects}\n",
      "    27923    0.049    0.000    1.576    0.000 <__array_function__ internals>:177(linspace)\n",
      "    27923    0.864    0.000    1.475    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/function_base.py:23(linspace)\n",
      "      100    0.001    0.000    1.351    0.014 <__array_function__ internals>:177(stack)\n",
      "      100    0.002    0.000    1.347    0.013 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:383(stack)\n",
      "      228    0.001    0.000    1.338    0.006 <__array_function__ internals>:177(concatenate)\n",
      "     6323    0.198    0.000    1.059    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/skimage/draw/draw_nd.py:54(line_nd)\n",
      "    10800    0.021    0.000    0.899    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:5045(<listcomp>)\n",
      "    40569    0.897    0.000    0.897    0.000 {method 'copy' of 'numpy.ndarray' objects}\n",
      "    36092    0.204    0.000    0.806    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_ni_support.py:73(_get_output)\n",
      "    10800    0.025    0.000    0.732    0.000 <__array_function__ internals>:177(broadcast_arrays)\n",
      "    10800    0.078    0.000    0.686    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:480(broadcast_arrays)\n",
      "        2    0.562    0.281    0.588    0.294 /home/bgray/neurotrack/notebooks/../data_prep/load.py:170(undirected_edge_list)\n",
      "     6324    0.546    0.000    0.546    0.000 {built-in method zeros}\n",
      "      106    0.488    0.005    0.488    0.005 {built-in method io.open}\n",
      "    10800    0.025    0.000    0.476    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:546(<listcomp>)\n",
      "    21600    0.373    0.000    0.451    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:340(_broadcast_to)\n",
      "        2    0.000    0.000    0.410    0.205 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4010(__init__)\n",
      "        2    0.402    0.201    0.402    0.201 {built-in method zeros_like}\n",
      "     6383    0.174    0.000    0.390    0.000 /home/bgray/neurotrack/notebooks/../data_prep/image.py:163(crop)\n",
      "        1    0.026    0.026    0.365    0.365 /home/bgray/neurotrack/notebooks/../data_prep/load.py:194(parse_swc)\n",
      "    17123    0.116    0.000    0.362    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_dtype.py:344(_name_get)\n",
      "        1    0.020    0.020    0.344    0.344 /home/bgray/neurotrack/notebooks/../data_prep/load.py:263(get_critical_points)\n",
      "    18969    0.196    0.000    0.341    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_filters.py:180(_gaussian_kernel1d)\n",
      "    12646    0.336    0.000    0.336    0.000 {method 'clone' of 'torch._C._TensorBase' objects}\n",
      "    37940    0.329    0.000    0.329    0.000 {method 'reduce' of 'numpy.ufunc' objects}\n",
      "      100    0.000    0.000    0.304    0.003 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:228(_open_file_like)\n",
      "      100    0.001    0.000    0.304    0.003 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:210(__init__)\n",
      "     2512    0.001    0.000    0.269    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14179(read)\n",
      "     2514    0.269    0.000    0.269    0.000 {method 'read' of '_io.BufferedReader' objects}\n",
      "    12647    0.256    0.000    0.256    0.000 {built-in method tensor}\n",
      "        1    0.000    0.000    0.249    0.249 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/tensor.py:21(wrapped)\n",
      "        1    0.249    0.249    0.249    0.249 {method 'gt' of 'torch._C._TensorBase' objects}\n",
      "    18969    0.048    0.000    0.229    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/skimage/draw/draw_nd.py:4(_round_safe)\n",
      "    17123    0.227    0.000    0.227    0.000 {built-in method numpy.zeros}\n",
      "    27923    0.042    0.000    0.199    0.000 <__array_function__ internals>:177(result_type)\n",
      "    17123    0.057    0.000    0.184    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_dtype.py:330(_name_includes_bit_suffix)\n",
      "        1    0.000    0.000    0.176    0.176 /home/bgray/neurotrack/notebooks/../data_prep/load.py:78(swc)\n",
      "        2    0.000    0.000    0.174    0.087 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:13995(__init__)\n",
      "        2    0.000    0.000    0.174    0.087 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14023(open)\n",
      "116861/116859    0.088    0.000    0.169    0.000 {built-in method numpy.asarray}\n",
      "        1    0.000    0.000    0.166    0.166 {method 'max' of 'numpy.ndarray' objects}\n",
      "        1    0.000    0.000    0.166    0.166 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_methods.py:39(_amax)\n",
      "     6323    0.041    0.000    0.162    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/skimage/_shared/utils.py:595(convert_to_float)\n",
      "        1    0.003    0.003    0.159    0.159 /home/bgray/neurotrack/notebooks/../data_prep/load.py:108(<listcomp>)\n",
      "    18969    0.016    0.000    0.159    0.000 <__array_function__ internals>:177(round_)\n",
      "     6339    0.155    0.000    0.155    0.000 {method 'split' of 'str' objects}\n",
      "        1    0.152    0.152    0.152    0.152 {method 'amax' of 'torch._C._TensorBase' objects}\n",
      "    12648    0.043    0.000    0.151    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:69(_wrapreduction)\n",
      "    65863    0.151    0.000    0.151    0.000 {built-in method numpy.arange}\n",
      "     6383    0.151    0.000    0.151    0.000 {built-in method maximum}\n",
      "    23448    0.050    0.000    0.143    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numerictypes.py:356(issubdtype)\n",
      "    10802    0.036    0.000    0.138    0.000 <__array_function__ internals>:177(transpose)\n",
      "     6324    0.040    0.000    0.130    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/tensor.py:576(__iter__)\n",
      "149429/149419    0.058    0.000    0.126    0.000 {built-in method builtins.isinstance}\n",
      "    18969    0.016    0.000    0.125    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3754(round_)\n",
      "    21600    0.034    0.000    0.118    0.000 <__array_function__ internals>:177(iscomplexobj)\n",
      "     6323    0.008    0.000    0.117    0.000 <__array_function__ internals>:177(any)\n",
      "     6323    0.011    0.000    0.112    0.000 <__array_function__ internals>:177(amax)\n",
      "    18969    0.016    0.000    0.109    0.000 <__array_function__ internals>:177(around)\n",
      "     6323    0.007    0.000    0.109    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/skimage/util/dtype.py:451(img_as_float)\n",
      "     6323    0.035    0.000    0.102    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/skimage/util/dtype.py:188(_convert)\n",
      "     6323    0.099    0.000    0.099    0.000 {built-in method amax}\n",
      "    60325    0.099    0.000    0.099    0.000 {method 'reshape' of 'numpy.ndarray' objects}\n",
      "    45288    0.094    0.000    0.094    0.000 {method 'item' of 'numpy.generic' objects}\n",
      "    18969    0.017    0.000    0.091    0.000 {method 'sum' of 'numpy.ndarray' objects}\n",
      "    46896    0.051    0.000    0.090    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numerictypes.py:282(issubclass_)\n",
      "     6323    0.016    0.000    0.089    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:2703(amax)\n",
      "     6323    0.012    0.000    0.089    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:2333(any)\n",
      "    27925    0.032    0.000    0.087    0.000 <__array_function__ internals>:177(ndim)\n",
      "    10800    0.061    0.000    0.084    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:5032(<listcomp>)\n",
      "    18973    0.048    0.000    0.081    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/tensor.py:624(__array__)\n",
      "    10800    0.077    0.000    0.078    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:416(_broadcast_shape)\n",
      "     6383    0.024    0.000    0.077    0.000 /home/bgray/neurotrack/notebooks/../data_prep/image.py:192(<listcomp>)\n",
      "    18969    0.017    0.000    0.076    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3245(around)\n",
      "    10802    0.021    0.000    0.076    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:601(transpose)\n",
      "    18969    0.009    0.000    0.074    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_methods.py:47(_sum)\n",
      "     6324    0.072    0.000    0.073    0.000 {method 'unbind' of 'torch._C._TensorBase' objects}\n",
      "    94579    0.072    0.000    0.072    0.000 {built-in method numpy.asanyarray}\n",
      "    12706    0.069    0.000    0.069    0.000 {method 'to' of 'torch._C._TensorBase' objects}\n",
      "    44280    0.015    0.000    0.068    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/abc.py:96(__instancecheck__)\n",
      "126783/126761    0.023    0.000    0.063    0.000 {built-in method builtins.len}\n",
      "     6323    0.062    0.000    0.062    0.000 {built-in method ceil}\n",
      "    12644    0.008    0.000    0.060    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_methods.py:55(_any)\n",
      "     6323    0.060    0.000    0.060    0.000 {built-in method sqrt}\n",
      "    25292    0.059    0.000    0.059    0.000 {method 'item' of 'torch._C._TensorBase' objects}\n",
      "    27921    0.033    0.000    0.058    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numeric.py:1878(isscalar)\n",
      "     6323    0.057    0.000    0.057    0.000 {built-in method sum}\n",
      "   128868    0.055    0.000    0.055    0.000 {built-in method builtins.issubclass}\n",
      "    21600    0.047    0.000    0.055    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/type_check.py:303(iscomplexobj)\n",
      "    59542    0.053    0.000    0.053    0.000 {method 'astype' of 'numpy.ndarray' objects}\n",
      "    44280    0.031    0.000    0.052    0.000 {built-in method _abc._abc_instancecheck}\n",
      "    25292    0.019    0.000    0.050    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_ni_support.py:57(_normalize_sequence)\n",
      "     6323    0.048    0.000    0.048    0.000 {built-in method round}\n",
      "     6725    0.005    0.000    0.047    0.000 <__array_function__ internals>:177(norm)\n",
      "     6323    0.016    0.000    0.047    0.000 {method 'any' of 'numpy.generic' objects}\n",
      "    29/17    0.000    0.000    0.041    0.002 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/functools.py:947(__get__)\n",
      "        2    0.000    0.000    0.041    0.021 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4399(series)\n",
      "        2    0.000    0.000    0.041    0.020 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4543(_series_shaped)\n",
      "        2    0.000    0.000    0.041    0.020 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4594(detect_series)\n",
      "        4    0.003    0.001    0.040    0.010 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7393(_seek)\n",
      "        2    0.000    0.000    0.040    0.020 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7626(__len__)\n",
      "    18969    0.040    0.000    0.040    0.000 {method 'round' of 'numpy.ndarray' objects}\n",
      "    21600    0.023    0.000    0.038    0.000 {built-in method builtins.any}\n",
      "     6321    0.008    0.000    0.038    0.000 {method 'any' of 'numpy.ndarray' objects}\n",
      "    17159    0.037    0.000    0.037    0.000 {method 'format' of 'str' objects}\n",
      "     6725    0.020    0.000    0.036    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/linalg/linalg.py:2342(norm)\n",
      "    18973    0.033    0.000    0.033    0.000 {method 'numpy' of 'torch._C._TensorBase' objects}\n",
      "    10800    0.017    0.000    0.028    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:538(<listcomp>)\n",
      "    17123    0.023    0.000    0.023    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_dtype.py:24(_kind_name)\n",
      "    21600    0.016    0.000    0.021    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:346(iterable)\n",
      "19210/18987    0.007    0.000    0.021    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/abc.py:100(__subclasscheck__)\n",
      "    10802    0.021    0.000    0.021    0.000 {method 'transpose' of 'numpy.ndarray' objects}\n",
      "    29769    0.021    0.000    0.021    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_ni_support.py:36(_extend_mode_to_code)\n",
      "        2    0.000    0.000    0.019    0.010 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:3589(to_csv)\n",
      "        2    0.000    0.000    0.019    0.010 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:1137(to_csv)\n",
      "    27925    0.019    0.000    0.019    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3152(ndim)\n",
      "    10801    0.008    0.000    0.019    0.000 {built-in method builtins.all}\n",
      "        2    0.000    0.000    0.018    0.009 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:235(save)\n",
      "    21600    0.017    0.000    0.017    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:542(<genexpr>)\n",
      "36320/36318    0.017    0.000    0.017    0.000 {built-in method builtins.getattr}\n",
      "     6323    0.013    0.000    0.017    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/skimage/_shared/utils.py:710(_supported_float_type)\n",
      "    64800    0.015    0.000    0.015    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:345(<genexpr>)\n",
      "19210/18987    0.015    0.000    0.015    0.000 {built-in method _abc._abc_subclasscheck}\n",
      "        2    0.000    0.000    0.014    0.007 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:648(get_handle)\n",
      "     6323    0.014    0.000    0.014    0.000 {method 'cpu' of 'torch._C._TensorBase' objects}\n",
      "    70071    0.013    0.000    0.013    0.000 {method 'append' of 'list' objects}\n",
      "      100    0.004    0.000    0.013    0.000 {method 'dump' of '_pickle.Pickler' objects}\n",
      "      100    0.003    0.000    0.013    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:258(__exit__)\n",
      "    21600    0.013    0.000    0.013    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:25(_maybe_view_as_subclass)\n",
      "     6329    0.008    0.000    0.012    0.000 <frozen importlib._bootstrap>:389(parent)\n",
      "     6324    0.012    0.000    0.012    0.000 {built-in method torch._C._get_tracing_state}\n",
      "    12648    0.011    0.000    0.011    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:70(<dictcomp>)\n",
      "    19209    0.011    0.000    0.011    0.000 {built-in method builtins.round}\n",
      "        1    0.010    0.010    0.010    0.010 /home/bgray/neurotrack/notebooks/../data_prep/load.py:109(<listcomp>)\n",
      "    18969    0.010    0.000    0.010    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_filters.py:51(_invalid_origin)\n",
      "    27923    0.009    0.000    0.009    0.000 {built-in method _operator.index}\n",
      "     6323    0.009    0.000    0.009    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_filters.py:364(<listcomp>)\n",
      "      100    0.009    0.000    0.009    0.000 {method 'flush' of '_io.BufferedWriter' objects}\n",
      "     6725    0.009    0.000    0.009    0.000 {method 'dot' of 'numpy.ndarray' objects}\n",
      "     6323    0.005    0.000    0.008    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numerictypes.py:228(obj2sctype)\n",
      "    27925    0.008    0.000    0.008    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3148(_ndim_dispatcher)\n",
      "    27923    0.008    0.000    0.008    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/function_base.py:18(_linspace_dispatcher)\n",
      "    27924    0.008    0.000    0.008    0.000 {built-in method builtins.iter}\n",
      "    27923    0.007    0.000    0.007    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/multiarray.py:668(result_type)\n",
      "    21600    0.007    0.000    0.007    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/type_check.py:206(_is_type_dispatcher)\n",
      "    19070    0.006    0.000    0.006    0.000 {built-in method numpy.core._multiarray_umath.normalize_axis_index}\n",
      "    37938    0.006    0.000    0.006    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3241(_around_dispatcher)\n",
      "    12648    0.005    0.000    0.006    0.000 {method 'tolist' of 'numpy.ndarray' objects}\n",
      "      100    0.004    0.000    0.006    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/tensor.py:83(__reduce_ex__)\n",
      "       12    0.004    0.000    0.006    0.000 /home/bgray/neurotrack/notebooks/../data_prep/load.py:223(<listcomp>)\n",
      "        2    0.005    0.003    0.005    0.003 {method 'readlines' of '_io._IOBase' objects}\n",
      "    10802    0.005    0.000    0.005    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:597(_transpose_dispatcher)\n",
      "       60    0.002    0.000    0.005    0.000 /home/bgray/neurotrack/notebooks/../data_prep/image.py:282(draw_point)\n",
      "        2    0.004    0.002    0.005    0.002 {method 'choice' of 'numpy.random._generator.Generator' objects}\n",
      "     6351    0.004    0.000    0.004    0.000 {method 'rpartition' of 'str' objects}\n",
      "        2    0.004    0.002    0.004    0.002 {built-in method posix.listdir}\n",
      "      100    0.000    0.000    0.004    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:263(_open_zipfile_writer)\n",
      "      102    0.004    0.000    0.004    0.000 {built-in method from_numpy}\n",
      "    10800    0.003    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:4887(_meshgrid_dispatcher)\n",
      "      100    0.003    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:254(__init__)\n",
      "      100    0.003    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:470(<listcomp>)\n",
      "     6326    0.003    0.000    0.003    0.000 {method 'dim' of 'torch._C._TensorBase' objects}\n",
      "     2200    0.002    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:453(persistent_id)\n",
      "        2    0.000    0.000    0.003    0.002 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:387(realpath)\n",
      "    12662    0.003    0.000    0.003    0.000 {method 'items' of 'dict' objects}\n",
      "        2    0.000    0.000    0.003    0.002 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:396(_joinrealpath)\n",
      "       10    0.000    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:164(islink)\n",
      "      100    0.002    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:458(<listcomp>)\n",
      "       10    0.003    0.000    0.003    0.000 {built-in method posix.lstat}\n",
      "        4    0.000    0.000    0.003    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/frame.py:641(__init__)\n",
      "        2    0.000    0.000    0.003    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/frame.py:1648(from_dict)\n",
      "     6725    0.002    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/linalg/linalg.py:117(isComplexType)\n",
      "        1    0.003    0.003    0.003    0.003 {built-in method randperm}\n",
      "      100    0.003    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:462(<setcomp>)\n",
      "    10800    0.003    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:476(_broadcast_arrays_dispatcher)\n",
      "        2    0.003    0.001    0.003    0.001 {method 'transpose' of 'torch._C._TensorBase' objects}\n",
      "        3    0.000    0.000    0.003    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1464(display)\n",
      "        5    0.000    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/iostream.py:592(flush)\n",
      "        2    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:261(_save)\n",
      "     6725    0.002    0.000    0.002    0.000 {method 'ravel' of 'numpy.ndarray' objects}\n",
      "        2    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/construction.py:238(ndarray_to_mgr)\n",
      "        6    0.000    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:540(wait)\n",
      "        3    0.000    0.000    0.002    0.001 <frozen importlib._bootstrap>:986(_find_and_load)\n",
      "        6    0.000    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:270(wait)\n",
      "        3    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:457(print_status)\n",
      "       44    0.002    0.000    0.002    0.000 {method 'acquire' of '_thread.lock' objects}\n",
      "      214    0.001    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:71(join)\n",
      "        3    0.000    0.000    0.002    0.001 <frozen importlib._bootstrap>:956(_find_and_load_unlocked)\n",
      "        2    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1160(__iter__)\n",
      "        8    0.000    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:194(inner)\n",
      "     6323    0.002    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:2698(_amax_dispatcher)\n",
      "        2    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:294(_save_body)\n",
      "        3    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:451(fp_write)\n",
      "        1    0.001    0.001    0.002    0.002 /home/bgray/neurotrack/notebooks/../data_prep/load.py:218(<listcomp>)\n",
      "        2    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:304(_save_chunk)\n",
      "        2    0.000    0.000    0.002    0.001 <__array_function__ internals>:177(unique)\n",
      "        2    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/arraysetops.py:138(unique)\n",
      "     6402    0.002    0.000    0.002    0.000 {method 'get' of 'dict' objects}\n",
      "        2    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/arraysetops.py:323(_unique1d)\n",
      "     6323    0.002    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:2328(_any_dispatcher)\n",
      "        2    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1325(refresh)\n",
      "      134    0.001    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/ipkernel.py:775(_clean_thread_parent_frames)\n",
      "     2510    0.001    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14152(seek)\n",
      "        1    0.000    0.000    0.002    0.002 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:663(__new__)\n",
      "        2    0.000    0.000    0.001    0.001 <frozen importlib._bootstrap>:650(_load_unlocked)\n",
      "        2    0.001    0.001    0.001    0.001 {method 'sort' of 'numpy.ndarray' objects}\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:952(__init__)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/warnings.py:96(_showwarnmsg)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/warnings.py:20(_showwarnmsg_impl)\n",
      "        2    0.000    0.000    0.001    0.001 <frozen importlib._bootstrap_external>:837(exec_module)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:760(get_lock)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:90(__init__)\n",
      "        1    0.001    0.001    0.001    0.001 /home/bgray/neurotrack/notebooks/../data_prep/load.py:301(<listcomp>)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:116(create_mp_lock)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/warnings.py:117(_formatwarnmsg)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/warnings.py:35(_formatwarnmsg_impl)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/context.py:70(RLock)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/linecache.py:15(getline)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/_fx/graph_module.py:24(patched_getline)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/linecache.py:37(getlines)\n",
      "     6323    0.001    0.000    0.001    0.000 {method 'remove' of 'list' objects}\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/linecache.py:82(updatecache)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1198(update)\n",
      "     6725    0.001    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/linalg/linalg.py:2338(_norm_dispatcher)\n",
      "     6327    0.001    0.000    0.001    0.000 {method 'pop' of 'dict' objects}\n",
      "        1    0.001    0.001    0.001    0.001 /home/bgray/neurotrack/notebooks/../data_prep/load.py:273(<listcomp>)\n",
      "        4    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:1364(_format_native_types)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/construction.py:724(_get_axes)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:7072(ensure_index)\n",
      "     6558    0.001    0.000    0.001    0.000 {method 'startswith' of 'str' objects}\n",
      "        2    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:909(get_code)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:469(__new__)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1265(close)\n",
      "        4    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/cast.py:123(maybe_convert_platform)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/construction.py:525(_prep_ndarraylike)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:137(__exit__)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7097(__init__)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:117(close)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/construction.py:537(convert)\n",
      "        2    0.001    0.000    0.001    0.000 {method 'close' of '_io.TextIOWrapper' objects}\n",
      "        6    0.001    0.000    0.001    0.000 {pandas._libs.lib.maybe_convert_objects}\n",
      "        6    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/missing.py:106(isna)\n",
      "        6    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/missing.py:189(_isna)\n",
      "      200    0.001    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:193(_is_path)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7775(__init__)\n",
      "     2200    0.001    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/__init__.py:265(is_storage)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:507(to_native_types)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:306(apply)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:528(to_native_types)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:50(__init__)\n",
      "        6    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:640(_simple_new)\n",
      "     6327    0.001    0.000    0.001    0.000 {method 'strip' of 'str' objects}\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:144(_initialize_columns)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/tokenize.py:388(open)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:2497(to_native_types)\n",
      "        4    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/missing.py:266(_isna_array)\n",
      "       67    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/ipkernel.py:790(<setcomp>)\n",
      "     2517    0.001    0.000    0.001    0.000 {method 'seek' of '_io.BufferedReader' objects}\n",
      "        3    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap>:890(_find_spec)\n",
      "        2    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:1029(get_data)\n",
      "       32    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10636(fromfile)\n",
      "       60    0.001    0.000    0.001    0.000 {built-in method ones}\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:438(status_printer)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/tokenize.py:295(detect_encoding)\n",
      "        4    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:1151(_is_binary_mode)\n",
      "      100    0.001    0.000    0.001    0.000 {method 'storage' of 'torch._C._TensorBase' objects}\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/tokenize.py:319(read_or_stop)\n",
      "       20    0.000    0.000    0.001    0.000 {built-in method posix.stat}\n",
      "     2624    0.001    0.000    0.001    0.000 {built-in method _struct.unpack}\n",
      "        1    0.001    0.001    0.001    0.001 {method 'readline' of '_io.BufferedReader' objects}\n",
      "      100    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:373(_stack_dispatcher)\n",
      "      100    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/_namedtensor_internals.py:10(check_serializing_named_tensor)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:589(check_parent_directory)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1399(find_spec)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1367(_get_spec)\n",
      "        2    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(vstack)\n",
      "       67    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:1336(enumerate)\n",
      "        6    0.000    0.000    0.000    0.000 {method 'add_index_reference' of 'pandas._libs.internals.BlockValuesRefs' objects}\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:211(_call_with_frames_removed)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method builtins.exec}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:223(vstack)\n",
      "       12    0.000    0.000    0.000    0.000 {pandas._libs.lib.is_list_like}\n",
      "       13    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1498(find_spec)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:1172(_get_binary_io_classes)\n",
      "      100    0.000    0.000    0.000    0.000 {method 'size' of 'torch._C._TensorBase' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/compat/_optional.py:91(import_optional_dependency)\n",
      "      100    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:164(location_tag)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/importlib/__init__.py:109(import_module)\n",
      "        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:1002(_gcd_import)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:1417(is_dir)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:1193(stat)\n",
      "      220    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:41(_get_sep)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1150(__str__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:11(<module>)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7588(__getitem__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7532(_getitem)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/iostream.py:655(write)\n",
      "      100    0.000    0.000    0.000    0.000 {method 'has_names' of 'torch._C._TensorBase' objects}\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:464(format_meter)\n",
      "       15    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/iostream.py:259(schedule)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexing.py:1089(__getitem__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10180(__init__)\n",
      "       75    0.000    0.000    0.000    0.000 {method 'integers' of 'numpy.random._generator.Generator' objects}\n",
      "        1    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(median)\n",
      "      100    0.000    0.000    0.000    0.000 {built-in method builtins.sorted}\n",
      "      545    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:1047(ident)\n",
      "      102    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:207(_arrays_for_stack_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:3774(median)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:266(_save_header)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:3692(_ureduce)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/missing.py:307(_isna_string_dtype)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexing.py:1623(_getitem_axis)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:3860(_median)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:638(_compile_bytecode)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method pandas._libs.missing.isnaobj}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/neurotrack/notebooks/../data_prep/collect.py:201(<dictcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexing.py:1660(_get_slice_axis)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method marshal.loads}\n",
      "      100    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:183(normalize_storage_type)\n",
      "      200    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:199(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 {pandas._libs.writers.write_csv_rows}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/_monitor.py:30(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:4136(_slice)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:285(_get_filepath_or_buffer)\n",
      "        5    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:1017(_handle_fromlist)\n",
      "        1    0.000    0.000    0.000    0.000 {numpy.random._generator.default_rng}\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method pandas._libs.writers.word_len}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:38(_wrapit)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:6458(__getattr__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:186(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:50(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10250(_gettags)\n",
      "     1254    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14612(size)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'writerow' of '_csv.writer' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/construction.py:494(sanitize_array)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/iostream.py:577(_schedule_flush)\n",
      "      100    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:314(_check_dill_version)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4547(append)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'tolist' of 'torch._C._TensorBase' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:834(start)\n",
      "      237    0.000    0.000    0.000    0.000 {method 'endswith' of 'str' objects}\n",
      "       15    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/zmq/sugar/socket.py:621(send)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:6473(__exit__)\n",
      "        9    0.000    0.000    0.000    0.000 {built-in method builtins.__build_class__}\n",
      "      100    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:116(_cpu_tag)\n",
      "      100    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/utils/hooks.py:52(warn_if_has_hooks)\n",
      "       57    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/codecs.py:319(decode)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4167(close)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:564(__init__)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:378(disp_len)\n",
      "       32    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10798(_process_value)\n",
      "      100    0.000    0.000    0.000    0.000 {method 'stride' of 'torch._C._TensorBase' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14126(close)\n",
      "       67    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:121(_path_join)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:374(_text_width)\n",
      "      153    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}\n",
      "       17    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:135(_path_stat)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/config.py:260(__call__)\n",
      "        3    0.000    0.000    0.000    0.000 {built-in method builtins.sum}\n",
      "        8    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numeric.py:290(full)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'get_slice' of 'pandas._libs.internals.BlockManager' objects}\n",
      "        2    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(prod)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'close' of '_io.BufferedReader' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17875(PAGE_FLAGS)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/config.py:134(_get_option)\n",
      "       18    0.000    0.000    0.000    0.000 {built-in method numpy.empty}\n",
      "       32    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10614(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(partition)\n",
      "      200    0.000    0.000    0.000    0.000 {method 'size' of 'torch._C.DoubleStorageBase' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:2955(prod)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:675(partition)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11750(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:549(module_from_spec)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:310(<listcomp>)\n",
      "       64    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/generic.py:42(_instancecheck)\n",
      "        4    0.000    0.000    0.000    0.000 {built-in method builtins.next}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:1098(iget_values)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/contextlib.py:72(inner)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:1(<module>)\n",
      "       57    0.000    0.000    0.000    0.000 {built-in method _codecs.utf_8_decode}\n",
      "        1    0.000    0.000    0.000    0.000 {method 'partition' of 'numpy.ndarray' objects}\n",
      "      132    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:375(<genexpr>)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:141(is_url)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:477(_init_module_attrs)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:20764(shaped_description_metadata)\n",
      "      242    0.000    0.000    0.000    0.000 {built-in method posix.fspath}\n",
      "      385    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1286(fp_write)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:114(_make_name)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/tensor.py:636(__array_wrap__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:222(encoded_labels)\n",
      "       60    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11274(valueof)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:1039(__new__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/urllib/parse.py:377(urlparse)\n",
      "      100    0.000    0.000    0.000    0.000 {method 'data_ptr' of 'torch._C.DoubleStorageBase' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexing.py:148(iloc)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:167(blknos)\n",
      "       20    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:1071(is_alive)\n",
      "      100    0.000    0.000    0.000    0.000 {method 'element_size' of 'torch._C.DoubleStorageBase' objects}\n",
      "      100    0.000    0.000    0.000    0.000 {method 'storage_offset' of 'torch._C._TensorBase' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/tempfile.py:144(__next__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/json/__init__.py:299(loads)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/config.py:116(_get_single_key)\n",
      "      228    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/multiarray.py:152(concatenate)\n",
      "        2    0.000    0.000    0.000    0.000 {method '_rebuild_blknos_and_blklocs' of 'pandas._libs.internals.BlockManager' objects}\n",
      "        8    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(copyto)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:147(__enter__)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method builtins.dir}\n",
      "       67    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:123(<listcomp>)\n",
      "      222    0.000    0.000    0.000    0.000 /home/bgray/neurotrack/notebooks/../data_prep/load.py:284(<listcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:678(_from_parts)\n",
      "       38    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/enum.py:313(__call__)\n",
      "      200    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:202(__enter__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:213(make_block)\n",
      "        1    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(mean)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/neurotrack/notebooks/../data_prep/collect.py:202(<dictcomp>)\n",
      "        7    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:505(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11937(dataoffset)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method io.open_code}\n",
      "        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:354(cache_from_source)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:686(_decr_instances)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:333(_screen_shape_linux)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3345(mean)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:2385(new_block)\n",
      "        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:376(cached)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/json/decoder.py:332(decode)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:658(_parse_args)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/urllib/parse.py:433(urlsplit)\n",
      "      242    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/cast.py:1573(construct_1d_object_array_from_listlike)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:158(is_object_dtype)\n",
      "        8    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10741(_read_value)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method _thread.start_new_thread}\n",
      "       64    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/generic.py:37(_check)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:2372(new_block_2d)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1494(_is_dtype_type)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:484(_get_cached)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_methods.py:164(_mean)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/utils.py:1086(_median_nancheck)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:2093(create_block_manager_from_blocks)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/cProfile.py:41(print_stats)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:157(_get_module_lock)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1209(is_float_dtype)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14604(extension)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/tempfile.py:133(rng)\n",
      "        7    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:222(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 {function SeedSequence.generate_state at 0x7f161c3b51f0}\n",
      "       62    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11302(get)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:21985(reshape_axes)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:534(infer_compression)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17888(<setcomp>)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:273(_is_ascii)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:64(parse_parts)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:479(get_adjustment)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/cast.py:1171(maybe_infer_to_datetimelike)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:265(__init__)\n",
      "        3    0.000    0.000    0.000    0.000 {method 'flatten' of 'numpy.ndarray' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/ipkernel.py:768(init_closure)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:372(abspath)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1446(format_dict)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:229(stringify_path)\n",
      "      129    0.000    0.000    0.000    0.000 {built-in method unicodedata.east_asian_width}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:683(_initialize_justify)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pstats.py:89(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:761(__init__)\n",
      "        5    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:400(format_interval)\n",
      "       80    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:102(acquire)\n",
      "      135    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_collections_abc.py:392(__subclasshook__)\n",
      "       20    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:1017(_wait_for_tstate_lock)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/construction.py:396(extract_array)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:5931(__finalize__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11830(_set_dimensions)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:881(__array__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:208(write_cols)\n",
      "       38    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/enum.py:631(__new__)\n",
      "        2    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(atleast_2d)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:2717(isna)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method fcntl.ioctl}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:5159(__getitem__)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:168(_number_format)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:334(normpath)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/random.py:94(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_ufunc_config.py:33(seterr)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_weakrefset.py:58(__iter__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:679(_get_free_pos)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/typing.py:768(__instancecheck__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pstats.py:99(init)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_ufunc_config.py:430(__enter__)\n",
      "      100    0.000    0.000    0.000    0.000 {method 'getvalue' of '_io.BytesIO' objects}\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1493(_get_spec)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:169(_expand_user)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:2688(_isnan)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/api.py:367(default_index)\n",
      "        8    0.000    0.000    0.000    0.000 {method 'match' of 're.Pattern' objects}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:140(has_mi_columns)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:112(_initialize_index_label)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/tensor.py:567(__len__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:117(splitext)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:21856(_squeeze_axes)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/config.py:596(_get_root)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:200(_has_aliases)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/random.py:123(seed)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/tempfile.py:147(<listcomp>)\n",
      "        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:127(_path_split)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:2401(check_ndim)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_weakrefset.py:106(remove)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:47(CSVFormatter)\n",
      "       11    0.000    0.000    0.000    0.000 {built-in method builtins.max}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:204(_need_to_save_header)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:110(__enter__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9477(is_memmappable)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/neurotrack/notebooks/../data_prep/load.py:300(<listcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/json/decoder.py:343(raw_decode)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:5205(_getitem_slice)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/base.py:54(shape)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:81(atleast_2d)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:106(release)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:121(_get_index_label_from_obj)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/config.py:649(_warn_if_deprecated)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:499(get_compression_method)\n",
      "       69    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:222(_verbose_message)\n",
      "        8    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/random.py:285(choice)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/range.py:202(_data)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/iostream.py:550(_is_master_process)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:154(_path_isfile)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:2305(maybe_coerce_values)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:179(data_index)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/construction.py:510(treat_as_nested)\n",
      "      140    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/neurotrack/notebooks/../data_prep/image.py:142(__init__)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14147(tell)\n",
      "       16    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_collections_abc.py:72(_check_methods)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:1823(_consolidate_inplace)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9418(is_contiguous)\n",
      "       20    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/config.py:610(_get_deprecated_option)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11783(<genexpr>)\n",
      "        1    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(count_nonzero)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/typing.py:771(__subclasscheck__)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/iostream.py:505(parent_header)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:728(__fspath__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/util.py:171(register_after_fork)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:16500(CLASSIC_LE)\n",
      "        3    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:665(_initialize_sparsify)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/inference.py:398(is_dataclass)\n",
      "       12    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10829(<genexpr>)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:186(__format__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:213(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:425(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:553(_classify_pyc)\n",
      "       14    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1330(_path_importer_cache)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:151(__exit__)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:2334(get_block_type)\n",
      "       20    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:22849(product)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:689(spec_from_file_location)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:145(_path_is_mode_type)\n",
      "       28    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11250(add)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:78(acquire)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1335(is_extension_array_dtype)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9191(nbytes)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:1805(is_consolidated)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'strftime' of 'datetime.date' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9886(is_imagej)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pstats.py:118(load_stats)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:682(<setcomp>)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/_distutils_hack/__init__.py:102(find_spec)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/construction.py:393(_check_values_indices_shape_match)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/range.py:166(_simple_new)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method _csv.writer}\n",
      "       15    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/iostream.py:138(_event_pipe)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:718(__str__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:100(split)\n",
      "        8    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/construction.py:458(ensure_wrapped_if_datetimelike)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:4049(_validate_positional_slice)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/typing.py:255(inner)\n",
      "        1    0.000    0.000    0.000    0.000 {function Random.seed at 0x7f163b0033a0}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/construction.py:563(_ensure_2d)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:113(__exit__)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:228(expanduser)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9891(is_shaped)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/construction.py:683(_sanitize_str_dtypes)\n",
      "       35    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_collections_abc.py:302(__subclasshook__)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:58(__init__)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1435(_is_dtype)\n",
      "       28    0.000    0.000    0.000    0.000 {built-in method builtins.setattr}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:231(__call__)\n",
      "        8    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/random.py:250(_randbelow_with_getrandbits)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14640(is_file)\n",
      "       18    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11411(__contains__)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:153(__init__)\n",
      "        8    0.000    0.000    0.000    0.000 {pandas._libs.lib.is_scalar}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:347(<listcomp>)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:103(release)\n",
      "        6    0.000    0.000    0.000    0.000 {method 'acquire' of '_multiprocessing.SemLock' objects}\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_collections_abc.py:252(__subclasshook__)\n",
      "       10    0.000    0.000    0.000    0.000 {method 'tell' of '_io.BufferedReader' objects}\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:60(isabs)\n",
      "       40    0.000    0.000    0.000    0.000 {built-in method _struct.calcsize}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/weakref.py:159(__setitem__)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:2107(_can_hold_na)\n",
      "        6    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:79(_unpack_uint32)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7214(set_keyframe)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_methods.py:67(_count_reduce_items)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:273(is_fsspec_url)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:218(_vhstack_dispatcher)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/typing.py:868(__new__)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/urllib/parse.py:428(_remove_unsafe_bytes_from_url)\n",
      "       12    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/range.py:892(__len__)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/range.py:308(dtype)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:945(parent)\n",
      "        2    0.000    0.000    0.000    0.000 {pandas._libs.lib.is_all_arraylike}\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1070(path_stats)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_bootlocale.py:33(getpreferredencoding)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:7167(maybe_extract_name)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/base.py:56(<genexpr>)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/genericpath.py:121(_splitext)\n",
      "       63    0.000    0.000    0.000    0.000 {built-in method builtins.ord}\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/config.py:637(_translate_key)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:1306(current_thread)\n",
      "        3    0.000    0.000    0.000    0.000 {built-in method now}\n",
      "       26    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7039(is_ndpi)\n",
      "       20    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x70d560}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:258(_acquire_restore)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_weakrefset.py:81(add)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/__init__.py:33(using_copy_on_write)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/config.py:578(_select_options)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/codecs.py:309(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:586(_validate_timestamp_pyc)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7009(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:22135(pyramidize_series)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:193(nlevels)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/dataclasses.py:1045(is_dataclass)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9924(is_lsm)\n",
      "       28    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4149(filehandle)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/tokenize.py:325(find_cookie)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/os.py:670(__getitem__)\n",
      "        3    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:176(cb)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:246(__enter__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_weakrefset.py:26(__exit__)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:498(is_string_or_object_np_dtype)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9467(is_final)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/warnings.py:403(__init__)\n",
      "       14    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:863(__enter__)\n",
      "       14    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:867(__exit__)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:144(<lambda>)\n",
      "       10    0.000    0.000    0.000    0.000 {method 'rfind' of 'str' objects}\n",
      "        2    0.000    0.000    0.000    0.000 {pandas._libs.lib.is_iterator}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:249(__exit__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17266(TAG_READERS)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1157(__hash__)\n",
      "       22    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:791(truncate)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:4153(_set_is_copy)\n",
      "       19    0.000    0.000    0.000    0.000 {built-in method _thread.allocate_lock}\n",
      "       52    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/typing.py:1149(cast)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_ufunc_config.py:435(__exit__)\n",
      "       14    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7622(__bool__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:701(_format_parsed_parts)\n",
      "        7    0.000    0.000    0.000    0.000 {built-in method posix.getpid}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:6367(_validate_indexer)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:22627(stripnull)\n",
      "        8    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:129(<genexpr>)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/cProfile.py:51(create_stats)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_ufunc_config.py:132(geterr)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:523(_get_axis)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17646(SAMPLE_DTYPES)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/neurotrack/notebooks/../data_prep/collect.py:168(<listcomp>)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/flags.py:49(__init__)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/urllib/parse.py:121(_coerce_args)\n",
      "        8    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:809(_reset_identity)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/typing.py:720(__hash__)\n",
      "       15    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_collections_abc.py:271(__subclasshook__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/functools.py:404(__get__)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1656(pandas_dtype)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:875(__len__)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:800(find_spec)\n",
      "       26    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10839(value)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:24468(bytes2str)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:261(_is_owned)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:130(_get_index_label_flat)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:723(_calc_max_cols_fitted)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexing.py:2609(check_dict_or_set_indexers)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7170(first)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:23495(parse_kwargs)\n",
      "        3    0.000    0.000    0.000    0.000 {built-in method builtins.id}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:139(__getattr__)\n",
      "       15    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:266(_supports_unicode)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method fromtimestamp}\n",
      "       22    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:513(is_set)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:565(_ensure_array)\n",
      "       10    0.000    0.000    0.000    0.000 {built-in method sys.intern}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:2465(extend_blocks)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1389(is_ea_or_datetimelike_dtype)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10381(keyframe)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:1017(from_blocks)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9103(index)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:342(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/construction.py:644(_sanitize_ndim)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:725(find_spec)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:156(__init__)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:142(classes)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:125(__eq__)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'take' of 'numpy.ndarray' objects}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1322(is_1d_only_ea_dtype)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:360(Barrier)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:255(_release_save)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/os.py:1073(__subclasshook__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/base.py:494(find)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11865(get_shape)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9819(imagej_description)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:293(splitroot)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_collections_abc.py:349(__subclasshook__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:734(_calc_max_rows_fitted)\n",
      "       10    0.000    0.000    0.000    0.000 {method 'partition' of 'str' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/arraysetops.py:125(_unpack_tuple)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/common.py:367(apply_if_callable)\n",
      "       21    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:1813(_consolidate_check)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'fill' of 'numpy.ndarray' objects}\n",
      "        7    0.000    0.000    0.000    0.000 {method 'acquire' of '_thread.RLock' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_weakrefset.py:20(__enter__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:12010(size)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numeric.py:432(count_nonzero)\n",
      "       20    0.000    0.000    0.000    0.000 {built-in method _imp.acquire_lock}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:691(_from_parsed_parts)\n",
      "        8    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/multiarray.py:1079(copyto)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:1103(_maybe_memory_map)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method math.floor}\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:152(wrapper_setattr)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method numpy.seterrobj}\n",
      "        5    0.000    0.000    0.000    0.000 {built-in method builtins.min}\n",
      "       13    0.000    0.000    0.000    0.000 {built-in method _thread.get_ident}\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:767(_is_in_terminal)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:143(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method _codecs.lookup}\n",
      "       20    0.000    0.000    0.000    0.000 {built-in method _imp.release_lock}\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:516(_check_name_wrapper)\n",
      "       10    0.000    0.000    0.000    0.000 {built-in method _stat.S_ISLNK}\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:1049(_init)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10030(is_scanimage)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:529(_get_block_manager_axis)\n",
      "        4    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/os.py:748(encode)\n",
      "        2    0.000    0.000    0.000    0.000 <string>:2(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:187(disable_on_exception)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11246(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/codecs.py:186(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1077(needs_i8_conversion)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:35(_new_module)\n",
      "        5    0.000    0.000    0.000    0.000 {method 'decode' of 'bytes' objects}\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method _locale.nl_langinfo}\n",
      "        2    0.000    0.000    0.000    0.000 <string>:1(__new__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:583(_dtype_to_subclass)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1459(get_dtype)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'startswith' of 'bytes' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9807(shaped_description)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:108(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:46(SemLock)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:689(_initialize_columns)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:509(_get_axis_number)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14617(closed)\n",
      "        7    0.000    0.000    0.000    0.000 {built-in method builtins.hash}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/flags.py:85(allows_duplicate_labels)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1240(<lambda>)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:167(colour)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17428(TAG_ENUM)\n",
      "       12    0.000    0.000    0.000    0.000 {method 'replace' of 'str' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9186(size)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/tensor.py:24(<genexpr>)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:163(_initialize_chunksize)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/inference.py:99(is_file_like)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17376(TAG_TUPLE)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:892(iget)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:5991(__setattr__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/inference.py:328(is_hashable)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method posix.getcwd}\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:226(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:210(Condition)\n",
      "        6    0.000    0.000    0.000    0.000 {built-in method time.time}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1153(_comparable)\n",
      "        6    0.000    0.000    0.000    0.000 {method 'get' of 'ContextVar' objects}\n",
      "        6    0.000    0.000    0.000    0.000 {method 'release' of '_multiprocessing.SemLock' objects}\n",
      "        3    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:104(header)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11370(__getitem__)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:92(na_rep)\n",
      "       16    0.000    0.000    0.000    0.000 {method 'getrandbits' of '_random.Random' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:222(__eq__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9919(is_stk)\n",
      "        4    0.000    0.000    0.000    0.000 {built-in method numpy.geterrobj}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/construction.py:636(_sanitize_non_ordered)\n",
      "       13    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:68(_relax_case)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/ma/core.py:6462(isMaskedArray)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:112(__format__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_weakrefset.py:16(__init__)\n",
      "        3    0.000    0.000    0.000    0.000 {built-in method _imp.is_frozen}\n",
      "        6    0.000    0.000    0.000    0.000 {method 'write' of '_io.StringIO' objects}\n",
      "        6    0.000    0.000    0.000    0.000 {method '__enter__' of '_thread.lock' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:252(_is_utf)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:108(index)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17311(TAG_LOAD)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method _imp._fix_co_filename}\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7205(useframes)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17398(TAG_ATTRIBUTES)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:96(float_format)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/weakref.py:323(__new__)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method _codecs.lookup_error}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9875(is_subsampled)\n",
      "        6    0.000    0.000    0.000    0.000 {pandas._libs.lib.is_integer}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/codecs.py:260(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9845(is_subifd)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:982(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10089(is_ndpi)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/construction.py:197(mgr_to_mgr)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/weakref.py:328(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'ravel' of 'numpy.generic' objects}\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:999(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11426(__len__)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'encode' of 'str' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:1177(_make_invoke_excepthook)\n",
      "        6    0.000    0.000    0.000    0.000 {built-in method from_bytes}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7209(keyframe)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/context.py:233(get_context)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10094(is_philips)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method _imp.is_builtin}\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath.count_nonzero}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:734(_newname)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17603(DATA_FORMATS)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/iostream.py:364(fileno)\n",
      "        7    0.000    0.000    0.000    0.000 {method 'release' of '_thread.RLock' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/range.py:249(start)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:633(is_truncated_horizontally)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_weakrefset.py:52(_commit_removals)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexing.py:2596(need_slice)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'fileno' of '_io.BufferedReader' objects}\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11846(shape)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/six.py:194(find_spec)\n",
      "        4    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14589(name)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:100(decimal)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method builtins.locals}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:1110(daemon)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numeric.py:574(_argwhere_dispatcher)\n",
      "        4    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:338(attrs)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'find' of 'str' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1147(__del__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:90(_make_methods)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:1025(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/range.py:257(stop)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/urllib/parse.py:110(_noop)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:183(blklocs)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:699(_initialize_colspace)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:163(colour)\n",
      "        5    0.000    0.000    0.000    0.000 {built-in method builtins.abs}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:1070(<genexpr>)\n",
      "        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:937(_sanity_check)\n",
      "        6    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.lock' objects}\n",
      "        6    0.000    0.000    0.000    0.000 {method 'release' of '_thread.lock' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:134(_initialize_quotechar)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:359(flags)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'difference' of 'set' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:233(items)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/frame.py:632(_constructor)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method _stat.S_ISDIR}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/range.py:264(step)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:637(is_truncated_vertically)\n",
      "        2    0.000    0.000    0.000    0.000 {pandas._libs.lib.is_float}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9113(keyframe)\n",
      "        4    0.000    0.000    0.000    0.000 {method 'strip' of 'bytes' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7200(useframes)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:12073(__len__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:2950(_prod_dispatcher)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4144(byteorder)\n",
      "        8    0.000    0.000    0.000    0.000 {method 'bit_length' of 'int' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9944(is_vista)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:931(dtype)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method _weakref.proxy}\n",
      "        4    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/construction.py:703(_maybe_repeat)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:1582(name)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:282(_screen_shape_wrapper)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n",
      "        4    0.000    0.000    0.000    0.000 {built-in method builtins.callable}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:4937(_values)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:397(has_location)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'setter' of 'property' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:15066(__enter__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/util.py:48(debug)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:670(_initialize_formatters)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:321(Event)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/urllib/parse.py:410(_checknetloc)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/flags.py:53(allows_duplicate_labels)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:1095(daemon)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:333(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:123(Semaphore)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/dateutil/tz/tz.py:74(utcoffset)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1024(get_filename)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/arraysetops.py:133(_unique_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:671(_partition_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3340(_mean_dispatcher)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:15069(__exit__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:77(_atleast_2d_dispatcher)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:753(_adjust_max_rows)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:134(__enter__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:1888(_nonzero_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/importlib_metadata/_compat.py:44(find_spec)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:1877(nlevels)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:98(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1301(<lambda>)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/process.py:37(current_process)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method atexit.register}\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:834(create_module)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:142(BoundedSemaphore)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:159(Lock)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:6470(__enter__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/context.py:197(get_start_method)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:3769(_median_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numeric.py:428(_count_nonzero_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:184(RLock)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/_distutils_hack/__init__.py:109(<lambda>)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/contextlib.py:59(_recreate_cm)\n",
      "\n",
      "\n",
      "         3267202 function calls (3180980 primitive calls) in 212.060 seconds\n",
      "\n",
      "   Ordered by: cumulative time\n",
      "\n",
      "   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n",
      "        1    0.690    0.690  212.060  212.060 /home/bgray/neurotrack/notebooks/../data_prep/collect.py:152(spherical_patch_dataset)\n",
      "        1    4.293    4.293  167.503  167.503 /home/bgray/neurotrack/notebooks/../data_prep/collect.py:109(save_spherical_patches)\n",
      "    10800    9.756    0.001  101.810    0.009 /home/bgray/neurotrack/notebooks/../data_prep/image.py:71(extract_spherical_patch)\n",
      "    10800    0.160    0.000   84.903    0.008 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_interpolation.py:358(map_coordinates)\n",
      "    10800   83.974    0.008   83.974    0.008 {built-in method scipy.ndimage._nd_image.geometric_transform}\n",
      "      100    0.003    0.000   59.254    0.593 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:333(save)\n",
      "      100   57.322    0.573   57.336    0.573 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:450(_save)\n",
      "        2    0.000    0.000   18.820    9.410 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:978(imread)\n",
      "        2    0.000    0.000   18.409    9.204 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4172(asarray)\n",
      "        2    0.000    0.000   18.368    9.184 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14261(read_array)\n",
      "        2   18.368    9.184   18.368    9.184 {method 'readinto' of '_io.BufferedReader' objects}\n",
      "195434/109706    1.717    0.000   13.862    0.000 {built-in method numpy.core._multiarray_umath.implement_array_function}\n",
      "        1    1.855    1.855   10.627   10.627 /home/bgray/neurotrack/notebooks/../data_prep/collect.py:64(random_points_from_mask)\n",
      "        1    0.265    0.265    8.911    8.911 /home/bgray/neurotrack/notebooks/../data_prep/draw.py:12(draw_neuron_density)\n",
      "    29773    0.036    0.000    8.669    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:51(_wrapfunc)\n",
      "        2    0.000    0.000    8.558    4.279 <__array_function__ internals>:177(argwhere)\n",
      "        2    0.000    0.000    8.558    4.279 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numeric.py:578(argwhere)\n",
      "        2    0.000    0.000    8.555    4.278 <__array_function__ internals>:177(nonzero)\n",
      "        2    0.000    0.000    8.555    4.278 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:1892(nonzero)\n",
      "        2    8.554    4.277    8.555    4.278 {method 'nonzero' of 'torch._C._TensorBase' objects}\n",
      "     6323    0.343    0.000    8.159    0.001 /home/bgray/neurotrack/notebooks/../data_prep/image.py:234(draw_line_segment)\n",
      "     6323    0.831    0.000    6.942    0.001 /home/bgray/neurotrack/notebooks/../data_prep/image.py:22(draw_line_segment)\n",
      "        1    4.607    4.607    5.208    5.208 /home/bgray/neurotrack/notebooks/../data_prep/draw.py:47(draw_neuron_mask)\n",
      "     6323    0.084    0.000    4.291    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/skimage/_shared/filters.py:35(gaussian)\n",
      "     6323    0.067    0.000    3.900    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_filters.py:279(gaussian_filter)\n",
      "    67700    3.877    0.000    3.877    0.000 {built-in method numpy.array}\n",
      "    18969    0.063    0.000    3.631    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_filters.py:211(gaussian_filter1d)\n",
      "    18969    0.113    0.000    3.173    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_filters.py:84(correlate1d)\n",
      "    18969    2.963    0.000    2.963    0.000 {built-in method scipy.ndimage._nd_image.correlate1d}\n",
      "    10800    0.033    0.000    1.909    0.000 <__array_function__ internals>:177(meshgrid)\n",
      "    10800    0.123    0.000    1.842    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:4892(meshgrid)\n",
      "      100    0.000    0.000    1.594    0.016 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:213(__exit__)\n",
      "      100    1.593    0.016    1.593    0.016 {method 'close' of '_io.BufferedWriter' objects}\n",
      "    27923    0.049    0.000    1.576    0.000 <__array_function__ internals>:177(linspace)\n",
      "    27923    0.864    0.000    1.475    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/function_base.py:23(linspace)\n",
      "      100    0.001    0.000    1.351    0.014 <__array_function__ internals>:177(stack)\n",
      "      100    0.002    0.000    1.347    0.013 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:383(stack)\n",
      "      228    0.001    0.000    1.338    0.006 <__array_function__ internals>:177(concatenate)\n",
      "     6323    0.198    0.000    1.059    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/skimage/draw/draw_nd.py:54(line_nd)\n",
      "    10800    0.021    0.000    0.899    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:5045(<listcomp>)\n",
      "    40569    0.897    0.000    0.897    0.000 {method 'copy' of 'numpy.ndarray' objects}\n",
      "    36092    0.204    0.000    0.806    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_ni_support.py:73(_get_output)\n",
      "    10800    0.025    0.000    0.732    0.000 <__array_function__ internals>:177(broadcast_arrays)\n",
      "    10800    0.078    0.000    0.686    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:480(broadcast_arrays)\n",
      "        2    0.562    0.281    0.588    0.294 /home/bgray/neurotrack/notebooks/../data_prep/load.py:170(undirected_edge_list)\n",
      "     6324    0.546    0.000    0.546    0.000 {built-in method zeros}\n",
      "      106    0.488    0.005    0.488    0.005 {built-in method io.open}\n",
      "    10800    0.025    0.000    0.476    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:546(<listcomp>)\n",
      "    21600    0.373    0.000    0.451    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:340(_broadcast_to)\n",
      "        2    0.000    0.000    0.410    0.205 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4010(__init__)\n",
      "        2    0.402    0.201    0.402    0.201 {built-in method zeros_like}\n",
      "     6383    0.174    0.000    0.390    0.000 /home/bgray/neurotrack/notebooks/../data_prep/image.py:163(crop)\n",
      "        1    0.026    0.026    0.365    0.365 /home/bgray/neurotrack/notebooks/../data_prep/load.py:194(parse_swc)\n",
      "    17123    0.116    0.000    0.362    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_dtype.py:344(_name_get)\n",
      "        1    0.020    0.020    0.344    0.344 /home/bgray/neurotrack/notebooks/../data_prep/load.py:263(get_critical_points)\n",
      "    18969    0.196    0.000    0.341    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_filters.py:180(_gaussian_kernel1d)\n",
      "    12646    0.336    0.000    0.336    0.000 {method 'clone' of 'torch._C._TensorBase' objects}\n",
      "    37940    0.329    0.000    0.329    0.000 {method 'reduce' of 'numpy.ufunc' objects}\n",
      "      100    0.000    0.000    0.304    0.003 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:228(_open_file_like)\n",
      "      100    0.001    0.000    0.304    0.003 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:210(__init__)\n",
      "     2512    0.001    0.000    0.269    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14179(read)\n",
      "     2514    0.269    0.000    0.269    0.000 {method 'read' of '_io.BufferedReader' objects}\n",
      "    12647    0.256    0.000    0.256    0.000 {built-in method tensor}\n",
      "        1    0.000    0.000    0.249    0.249 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/tensor.py:21(wrapped)\n",
      "        1    0.249    0.249    0.249    0.249 {method 'gt' of 'torch._C._TensorBase' objects}\n",
      "    18969    0.048    0.000    0.229    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/skimage/draw/draw_nd.py:4(_round_safe)\n",
      "    17123    0.227    0.000    0.227    0.000 {built-in method numpy.zeros}\n",
      "    27923    0.042    0.000    0.199    0.000 <__array_function__ internals>:177(result_type)\n",
      "    17123    0.057    0.000    0.184    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_dtype.py:330(_name_includes_bit_suffix)\n",
      "        1    0.000    0.000    0.176    0.176 /home/bgray/neurotrack/notebooks/../data_prep/load.py:78(swc)\n",
      "        2    0.000    0.000    0.174    0.087 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:13995(__init__)\n",
      "        2    0.000    0.000    0.174    0.087 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14023(open)\n",
      "116861/116859    0.088    0.000    0.169    0.000 {built-in method numpy.asarray}\n",
      "        1    0.000    0.000    0.166    0.166 {method 'max' of 'numpy.ndarray' objects}\n",
      "        1    0.000    0.000    0.166    0.166 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_methods.py:39(_amax)\n",
      "     6323    0.041    0.000    0.162    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/skimage/_shared/utils.py:595(convert_to_float)\n",
      "        1    0.003    0.003    0.159    0.159 /home/bgray/neurotrack/notebooks/../data_prep/load.py:108(<listcomp>)\n",
      "    18969    0.016    0.000    0.159    0.000 <__array_function__ internals>:177(round_)\n",
      "     6339    0.155    0.000    0.155    0.000 {method 'split' of 'str' objects}\n",
      "        1    0.152    0.152    0.152    0.152 {method 'amax' of 'torch._C._TensorBase' objects}\n",
      "    12648    0.043    0.000    0.151    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:69(_wrapreduction)\n",
      "    65863    0.151    0.000    0.151    0.000 {built-in method numpy.arange}\n",
      "     6383    0.151    0.000    0.151    0.000 {built-in method maximum}\n",
      "    23448    0.050    0.000    0.143    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numerictypes.py:356(issubdtype)\n",
      "    10802    0.036    0.000    0.138    0.000 <__array_function__ internals>:177(transpose)\n",
      "     6324    0.040    0.000    0.130    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/tensor.py:576(__iter__)\n",
      "149429/149419    0.058    0.000    0.126    0.000 {built-in method builtins.isinstance}\n",
      "    18969    0.016    0.000    0.125    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3754(round_)\n",
      "    21600    0.034    0.000    0.118    0.000 <__array_function__ internals>:177(iscomplexobj)\n",
      "     6323    0.008    0.000    0.117    0.000 <__array_function__ internals>:177(any)\n",
      "     6323    0.011    0.000    0.112    0.000 <__array_function__ internals>:177(amax)\n",
      "    18969    0.016    0.000    0.109    0.000 <__array_function__ internals>:177(around)\n",
      "     6323    0.007    0.000    0.109    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/skimage/util/dtype.py:451(img_as_float)\n",
      "     6323    0.035    0.000    0.102    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/skimage/util/dtype.py:188(_convert)\n",
      "     6323    0.099    0.000    0.099    0.000 {built-in method amax}\n",
      "    60325    0.099    0.000    0.099    0.000 {method 'reshape' of 'numpy.ndarray' objects}\n",
      "    45288    0.094    0.000    0.094    0.000 {method 'item' of 'numpy.generic' objects}\n",
      "    18969    0.017    0.000    0.091    0.000 {method 'sum' of 'numpy.ndarray' objects}\n",
      "    46896    0.051    0.000    0.090    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numerictypes.py:282(issubclass_)\n",
      "     6323    0.016    0.000    0.089    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:2703(amax)\n",
      "     6323    0.012    0.000    0.089    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:2333(any)\n",
      "    27925    0.032    0.000    0.087    0.000 <__array_function__ internals>:177(ndim)\n",
      "    10800    0.061    0.000    0.084    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:5032(<listcomp>)\n",
      "    18973    0.048    0.000    0.081    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/tensor.py:624(__array__)\n",
      "    10800    0.077    0.000    0.078    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:416(_broadcast_shape)\n",
      "     6383    0.024    0.000    0.077    0.000 /home/bgray/neurotrack/notebooks/../data_prep/image.py:192(<listcomp>)\n",
      "    18969    0.017    0.000    0.076    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3245(around)\n",
      "    10802    0.021    0.000    0.076    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:601(transpose)\n",
      "    18969    0.009    0.000    0.074    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_methods.py:47(_sum)\n",
      "     6324    0.072    0.000    0.073    0.000 {method 'unbind' of 'torch._C._TensorBase' objects}\n",
      "    94579    0.072    0.000    0.072    0.000 {built-in method numpy.asanyarray}\n",
      "    12706    0.069    0.000    0.069    0.000 {method 'to' of 'torch._C._TensorBase' objects}\n",
      "    44280    0.015    0.000    0.068    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/abc.py:96(__instancecheck__)\n",
      "126783/126761    0.023    0.000    0.063    0.000 {built-in method builtins.len}\n",
      "     6323    0.062    0.000    0.062    0.000 {built-in method ceil}\n",
      "    12644    0.008    0.000    0.060    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_methods.py:55(_any)\n",
      "     6323    0.060    0.000    0.060    0.000 {built-in method sqrt}\n",
      "    25292    0.059    0.000    0.059    0.000 {method 'item' of 'torch._C._TensorBase' objects}\n",
      "    27921    0.033    0.000    0.058    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numeric.py:1878(isscalar)\n",
      "     6323    0.057    0.000    0.057    0.000 {built-in method sum}\n",
      "   128868    0.055    0.000    0.055    0.000 {built-in method builtins.issubclass}\n",
      "    21600    0.047    0.000    0.055    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/type_check.py:303(iscomplexobj)\n",
      "    59542    0.053    0.000    0.053    0.000 {method 'astype' of 'numpy.ndarray' objects}\n",
      "    44280    0.031    0.000    0.052    0.000 {built-in method _abc._abc_instancecheck}\n",
      "    25292    0.019    0.000    0.050    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_ni_support.py:57(_normalize_sequence)\n",
      "     6323    0.048    0.000    0.048    0.000 {built-in method round}\n",
      "     6725    0.005    0.000    0.047    0.000 <__array_function__ internals>:177(norm)\n",
      "     6323    0.016    0.000    0.047    0.000 {method 'any' of 'numpy.generic' objects}\n",
      "    29/17    0.000    0.000    0.041    0.002 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/functools.py:947(__get__)\n",
      "        2    0.000    0.000    0.041    0.021 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4399(series)\n",
      "        2    0.000    0.000    0.041    0.020 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4543(_series_shaped)\n",
      "        2    0.000    0.000    0.041    0.020 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4594(detect_series)\n",
      "        4    0.003    0.001    0.040    0.010 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7393(_seek)\n",
      "        2    0.000    0.000    0.040    0.020 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7626(__len__)\n",
      "    18969    0.040    0.000    0.040    0.000 {method 'round' of 'numpy.ndarray' objects}\n",
      "    21600    0.023    0.000    0.038    0.000 {built-in method builtins.any}\n",
      "     6321    0.008    0.000    0.038    0.000 {method 'any' of 'numpy.ndarray' objects}\n",
      "    17159    0.037    0.000    0.037    0.000 {method 'format' of 'str' objects}\n",
      "     6725    0.020    0.000    0.036    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/linalg/linalg.py:2342(norm)\n",
      "    18973    0.033    0.000    0.033    0.000 {method 'numpy' of 'torch._C._TensorBase' objects}\n",
      "    10800    0.017    0.000    0.028    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:538(<listcomp>)\n",
      "    17123    0.023    0.000    0.023    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_dtype.py:24(_kind_name)\n",
      "    21600    0.016    0.000    0.021    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:346(iterable)\n",
      "19210/18987    0.007    0.000    0.021    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/abc.py:100(__subclasscheck__)\n",
      "    10802    0.021    0.000    0.021    0.000 {method 'transpose' of 'numpy.ndarray' objects}\n",
      "    29769    0.021    0.000    0.021    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_ni_support.py:36(_extend_mode_to_code)\n",
      "        2    0.000    0.000    0.019    0.010 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:3589(to_csv)\n",
      "        2    0.000    0.000    0.019    0.010 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:1137(to_csv)\n",
      "    27925    0.019    0.000    0.019    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3152(ndim)\n",
      "    10801    0.008    0.000    0.019    0.000 {built-in method builtins.all}\n",
      "        2    0.000    0.000    0.018    0.009 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:235(save)\n",
      "    21600    0.017    0.000    0.017    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:542(<genexpr>)\n",
      "36320/36318    0.017    0.000    0.017    0.000 {built-in method builtins.getattr}\n",
      "     6323    0.013    0.000    0.017    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/skimage/_shared/utils.py:710(_supported_float_type)\n",
      "    64800    0.015    0.000    0.015    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:345(<genexpr>)\n",
      "19210/18987    0.015    0.000    0.015    0.000 {built-in method _abc._abc_subclasscheck}\n",
      "        2    0.000    0.000    0.014    0.007 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:648(get_handle)\n",
      "     6323    0.014    0.000    0.014    0.000 {method 'cpu' of 'torch._C._TensorBase' objects}\n",
      "    70071    0.013    0.000    0.013    0.000 {method 'append' of 'list' objects}\n",
      "      100    0.004    0.000    0.013    0.000 {method 'dump' of '_pickle.Pickler' objects}\n",
      "      100    0.003    0.000    0.013    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:258(__exit__)\n",
      "    21600    0.013    0.000    0.013    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:25(_maybe_view_as_subclass)\n",
      "     6329    0.008    0.000    0.012    0.000 <frozen importlib._bootstrap>:389(parent)\n",
      "     6324    0.012    0.000    0.012    0.000 {built-in method torch._C._get_tracing_state}\n",
      "    12648    0.011    0.000    0.011    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:70(<dictcomp>)\n",
      "    19209    0.011    0.000    0.011    0.000 {built-in method builtins.round}\n",
      "        1    0.010    0.010    0.010    0.010 /home/bgray/neurotrack/notebooks/../data_prep/load.py:109(<listcomp>)\n",
      "    18969    0.010    0.000    0.010    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_filters.py:51(_invalid_origin)\n",
      "    27923    0.009    0.000    0.009    0.000 {built-in method _operator.index}\n",
      "     6323    0.009    0.000    0.009    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/scipy/ndimage/_filters.py:364(<listcomp>)\n",
      "      100    0.009    0.000    0.009    0.000 {method 'flush' of '_io.BufferedWriter' objects}\n",
      "     6725    0.009    0.000    0.009    0.000 {method 'dot' of 'numpy.ndarray' objects}\n",
      "     6323    0.005    0.000    0.008    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numerictypes.py:228(obj2sctype)\n",
      "    27925    0.008    0.000    0.008    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3148(_ndim_dispatcher)\n",
      "    27923    0.008    0.000    0.008    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/function_base.py:18(_linspace_dispatcher)\n",
      "    27924    0.008    0.000    0.008    0.000 {built-in method builtins.iter}\n",
      "    27923    0.007    0.000    0.007    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/multiarray.py:668(result_type)\n",
      "    21600    0.007    0.000    0.007    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/type_check.py:206(_is_type_dispatcher)\n",
      "    19070    0.006    0.000    0.006    0.000 {built-in method numpy.core._multiarray_umath.normalize_axis_index}\n",
      "    37938    0.006    0.000    0.006    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3241(_around_dispatcher)\n",
      "    12648    0.005    0.000    0.006    0.000 {method 'tolist' of 'numpy.ndarray' objects}\n",
      "      100    0.004    0.000    0.006    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/tensor.py:83(__reduce_ex__)\n",
      "       12    0.004    0.000    0.006    0.000 /home/bgray/neurotrack/notebooks/../data_prep/load.py:223(<listcomp>)\n",
      "        2    0.005    0.003    0.005    0.003 {method 'readlines' of '_io._IOBase' objects}\n",
      "    10802    0.005    0.000    0.005    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:597(_transpose_dispatcher)\n",
      "       60    0.002    0.000    0.005    0.000 /home/bgray/neurotrack/notebooks/../data_prep/image.py:282(draw_point)\n",
      "        2    0.004    0.002    0.005    0.002 {method 'choice' of 'numpy.random._generator.Generator' objects}\n",
      "     6351    0.004    0.000    0.004    0.000 {method 'rpartition' of 'str' objects}\n",
      "        2    0.004    0.002    0.004    0.002 {built-in method posix.listdir}\n",
      "      100    0.000    0.000    0.004    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:263(_open_zipfile_writer)\n",
      "      102    0.004    0.000    0.004    0.000 {built-in method from_numpy}\n",
      "    10800    0.003    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:4887(_meshgrid_dispatcher)\n",
      "      100    0.003    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:254(__init__)\n",
      "      100    0.003    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:470(<listcomp>)\n",
      "     6326    0.003    0.000    0.003    0.000 {method 'dim' of 'torch._C._TensorBase' objects}\n",
      "     2200    0.002    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:453(persistent_id)\n",
      "        2    0.000    0.000    0.003    0.002 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:387(realpath)\n",
      "    12662    0.003    0.000    0.003    0.000 {method 'items' of 'dict' objects}\n",
      "        2    0.000    0.000    0.003    0.002 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:396(_joinrealpath)\n",
      "       10    0.000    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:164(islink)\n",
      "      100    0.002    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:458(<listcomp>)\n",
      "       10    0.003    0.000    0.003    0.000 {built-in method posix.lstat}\n",
      "        4    0.000    0.000    0.003    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/frame.py:641(__init__)\n",
      "        2    0.000    0.000    0.003    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/frame.py:1648(from_dict)\n",
      "     6725    0.002    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/linalg/linalg.py:117(isComplexType)\n",
      "        1    0.003    0.003    0.003    0.003 {built-in method randperm}\n",
      "      100    0.003    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:462(<setcomp>)\n",
      "    10800    0.003    0.000    0.003    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/stride_tricks.py:476(_broadcast_arrays_dispatcher)\n",
      "        2    0.003    0.001    0.003    0.001 {method 'transpose' of 'torch._C._TensorBase' objects}\n",
      "        3    0.000    0.000    0.003    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1464(display)\n",
      "        5    0.000    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/iostream.py:592(flush)\n",
      "        2    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:261(_save)\n",
      "     6725    0.002    0.000    0.002    0.000 {method 'ravel' of 'numpy.ndarray' objects}\n",
      "        2    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/construction.py:238(ndarray_to_mgr)\n",
      "        6    0.000    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:540(wait)\n",
      "        3    0.000    0.000    0.002    0.001 <frozen importlib._bootstrap>:986(_find_and_load)\n",
      "        6    0.000    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:270(wait)\n",
      "        3    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:457(print_status)\n",
      "       44    0.002    0.000    0.002    0.000 {method 'acquire' of '_thread.lock' objects}\n",
      "      214    0.001    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:71(join)\n",
      "        3    0.000    0.000    0.002    0.001 <frozen importlib._bootstrap>:956(_find_and_load_unlocked)\n",
      "        2    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1160(__iter__)\n",
      "        8    0.000    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:194(inner)\n",
      "     6323    0.002    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:2698(_amax_dispatcher)\n",
      "        2    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:294(_save_body)\n",
      "        3    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:451(fp_write)\n",
      "        1    0.001    0.001    0.002    0.002 /home/bgray/neurotrack/notebooks/../data_prep/load.py:218(<listcomp>)\n",
      "        2    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:304(_save_chunk)\n",
      "        2    0.000    0.000    0.002    0.001 <__array_function__ internals>:177(unique)\n",
      "        2    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/arraysetops.py:138(unique)\n",
      "     6402    0.002    0.000    0.002    0.000 {method 'get' of 'dict' objects}\n",
      "        2    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/arraysetops.py:323(_unique1d)\n",
      "     6323    0.002    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:2328(_any_dispatcher)\n",
      "        2    0.000    0.000    0.002    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1325(refresh)\n",
      "      134    0.001    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/ipkernel.py:775(_clean_thread_parent_frames)\n",
      "     2510    0.001    0.000    0.002    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14152(seek)\n",
      "        1    0.000    0.000    0.002    0.002 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:663(__new__)\n",
      "        2    0.000    0.000    0.001    0.001 <frozen importlib._bootstrap>:650(_load_unlocked)\n",
      "        2    0.001    0.001    0.001    0.001 {method 'sort' of 'numpy.ndarray' objects}\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:952(__init__)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/warnings.py:96(_showwarnmsg)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/warnings.py:20(_showwarnmsg_impl)\n",
      "        2    0.000    0.000    0.001    0.001 <frozen importlib._bootstrap_external>:837(exec_module)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:760(get_lock)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:90(__init__)\n",
      "        1    0.001    0.001    0.001    0.001 /home/bgray/neurotrack/notebooks/../data_prep/load.py:301(<listcomp>)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:116(create_mp_lock)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/warnings.py:117(_formatwarnmsg)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/warnings.py:35(_formatwarnmsg_impl)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/context.py:70(RLock)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/linecache.py:15(getline)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/_fx/graph_module.py:24(patched_getline)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/linecache.py:37(getlines)\n",
      "     6323    0.001    0.000    0.001    0.000 {method 'remove' of 'list' objects}\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/linecache.py:82(updatecache)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1198(update)\n",
      "     6725    0.001    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/linalg/linalg.py:2338(_norm_dispatcher)\n",
      "     6327    0.001    0.000    0.001    0.000 {method 'pop' of 'dict' objects}\n",
      "        1    0.001    0.001    0.001    0.001 /home/bgray/neurotrack/notebooks/../data_prep/load.py:273(<listcomp>)\n",
      "        4    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:1364(_format_native_types)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/construction.py:724(_get_axes)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:7072(ensure_index)\n",
      "     6558    0.001    0.000    0.001    0.000 {method 'startswith' of 'str' objects}\n",
      "        2    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:909(get_code)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:469(__new__)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1265(close)\n",
      "        4    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/cast.py:123(maybe_convert_platform)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/construction.py:525(_prep_ndarraylike)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:137(__exit__)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7097(__init__)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:117(close)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/construction.py:537(convert)\n",
      "        2    0.001    0.000    0.001    0.000 {method 'close' of '_io.TextIOWrapper' objects}\n",
      "        6    0.001    0.000    0.001    0.000 {pandas._libs.lib.maybe_convert_objects}\n",
      "        6    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/missing.py:106(isna)\n",
      "        6    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/missing.py:189(_isna)\n",
      "      200    0.001    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:193(_is_path)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7775(__init__)\n",
      "     2200    0.001    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/__init__.py:265(is_storage)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:507(to_native_types)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:306(apply)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:528(to_native_types)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:50(__init__)\n",
      "        6    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:640(_simple_new)\n",
      "     6327    0.001    0.000    0.001    0.000 {method 'strip' of 'str' objects}\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:144(_initialize_columns)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/tokenize.py:388(open)\n",
      "        2    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:2497(to_native_types)\n",
      "        4    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/missing.py:266(_isna_array)\n",
      "       67    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/ipkernel.py:790(<setcomp>)\n",
      "     2517    0.001    0.000    0.001    0.000 {method 'seek' of '_io.BufferedReader' objects}\n",
      "        3    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap>:890(_find_spec)\n",
      "        2    0.000    0.000    0.001    0.000 <frozen importlib._bootstrap_external>:1029(get_data)\n",
      "       32    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10636(fromfile)\n",
      "       60    0.001    0.000    0.001    0.000 {built-in method ones}\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:438(status_printer)\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/tokenize.py:295(detect_encoding)\n",
      "        4    0.000    0.000    0.001    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:1151(_is_binary_mode)\n",
      "      100    0.001    0.000    0.001    0.000 {method 'storage' of 'torch._C._TensorBase' objects}\n",
      "        1    0.000    0.000    0.001    0.001 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/tokenize.py:319(read_or_stop)\n",
      "       20    0.000    0.000    0.001    0.000 {built-in method posix.stat}\n",
      "     2624    0.001    0.000    0.001    0.000 {built-in method _struct.unpack}\n",
      "        1    0.001    0.001    0.001    0.001 {method 'readline' of '_io.BufferedReader' objects}\n",
      "      100    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:373(_stack_dispatcher)\n",
      "      100    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/_namedtensor_internals.py:10(check_serializing_named_tensor)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:589(check_parent_directory)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1399(find_spec)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1367(_get_spec)\n",
      "        2    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(vstack)\n",
      "       67    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:1336(enumerate)\n",
      "        6    0.000    0.000    0.000    0.000 {method 'add_index_reference' of 'pandas._libs.internals.BlockValuesRefs' objects}\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:211(_call_with_frames_removed)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method builtins.exec}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:223(vstack)\n",
      "       12    0.000    0.000    0.000    0.000 {pandas._libs.lib.is_list_like}\n",
      "       13    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1498(find_spec)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:1172(_get_binary_io_classes)\n",
      "      100    0.000    0.000    0.000    0.000 {method 'size' of 'torch._C._TensorBase' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/compat/_optional.py:91(import_optional_dependency)\n",
      "      100    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:164(location_tag)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/importlib/__init__.py:109(import_module)\n",
      "        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:1002(_gcd_import)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:1417(is_dir)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:1193(stat)\n",
      "      220    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:41(_get_sep)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1150(__str__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:11(<module>)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7588(__getitem__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7532(_getitem)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/iostream.py:655(write)\n",
      "      100    0.000    0.000    0.000    0.000 {method 'has_names' of 'torch._C._TensorBase' objects}\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:464(format_meter)\n",
      "       15    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/iostream.py:259(schedule)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexing.py:1089(__getitem__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10180(__init__)\n",
      "       75    0.000    0.000    0.000    0.000 {method 'integers' of 'numpy.random._generator.Generator' objects}\n",
      "        1    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(median)\n",
      "      100    0.000    0.000    0.000    0.000 {built-in method builtins.sorted}\n",
      "      545    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:1047(ident)\n",
      "      102    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:207(_arrays_for_stack_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:3774(median)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:266(_save_header)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:3692(_ureduce)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/missing.py:307(_isna_string_dtype)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexing.py:1623(_getitem_axis)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:3860(_median)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:638(_compile_bytecode)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method pandas._libs.missing.isnaobj}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/neurotrack/notebooks/../data_prep/collect.py:201(<dictcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexing.py:1660(_get_slice_axis)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method marshal.loads}\n",
      "      100    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:183(normalize_storage_type)\n",
      "      200    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:199(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 {pandas._libs.writers.write_csv_rows}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/_monitor.py:30(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:4136(_slice)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:285(_get_filepath_or_buffer)\n",
      "        5    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:1017(_handle_fromlist)\n",
      "        1    0.000    0.000    0.000    0.000 {numpy.random._generator.default_rng}\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method pandas._libs.writers.word_len}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:38(_wrapit)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:6458(__getattr__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:186(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:50(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10250(_gettags)\n",
      "     1254    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14612(size)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'writerow' of '_csv.writer' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/construction.py:494(sanitize_array)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/iostream.py:577(_schedule_flush)\n",
      "      100    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:314(_check_dill_version)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4547(append)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'tolist' of 'torch._C._TensorBase' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:834(start)\n",
      "      237    0.000    0.000    0.000    0.000 {method 'endswith' of 'str' objects}\n",
      "       15    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/zmq/sugar/socket.py:621(send)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:6473(__exit__)\n",
      "        9    0.000    0.000    0.000    0.000 {built-in method builtins.__build_class__}\n",
      "      100    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:116(_cpu_tag)\n",
      "      100    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/utils/hooks.py:52(warn_if_has_hooks)\n",
      "       57    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/codecs.py:319(decode)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4167(close)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:564(__init__)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:378(disp_len)\n",
      "       32    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10798(_process_value)\n",
      "      100    0.000    0.000    0.000    0.000 {method 'stride' of 'torch._C._TensorBase' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14126(close)\n",
      "       67    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:121(_path_join)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:374(_text_width)\n",
      "      153    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}\n",
      "       17    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:135(_path_stat)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/config.py:260(__call__)\n",
      "        3    0.000    0.000    0.000    0.000 {built-in method builtins.sum}\n",
      "        8    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numeric.py:290(full)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'get_slice' of 'pandas._libs.internals.BlockManager' objects}\n",
      "        2    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(prod)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'close' of '_io.BufferedReader' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17875(PAGE_FLAGS)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/config.py:134(_get_option)\n",
      "       18    0.000    0.000    0.000    0.000 {built-in method numpy.empty}\n",
      "       32    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10614(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(partition)\n",
      "      200    0.000    0.000    0.000    0.000 {method 'size' of 'torch._C.DoubleStorageBase' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:2955(prod)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:675(partition)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11750(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:549(module_from_spec)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:310(<listcomp>)\n",
      "       64    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/generic.py:42(_instancecheck)\n",
      "        4    0.000    0.000    0.000    0.000 {built-in method builtins.next}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:1098(iget_values)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/contextlib.py:72(inner)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:1(<module>)\n",
      "       57    0.000    0.000    0.000    0.000 {built-in method _codecs.utf_8_decode}\n",
      "        1    0.000    0.000    0.000    0.000 {method 'partition' of 'numpy.ndarray' objects}\n",
      "      132    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:375(<genexpr>)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:141(is_url)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:477(_init_module_attrs)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:20764(shaped_description_metadata)\n",
      "      242    0.000    0.000    0.000    0.000 {built-in method posix.fspath}\n",
      "      385    0.000    0.000    0.000    0.000 {method 'keys' of 'dict' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1286(fp_write)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:114(_make_name)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/tensor.py:636(__array_wrap__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:222(encoded_labels)\n",
      "       60    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11274(valueof)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:1039(__new__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/urllib/parse.py:377(urlparse)\n",
      "      100    0.000    0.000    0.000    0.000 {method 'data_ptr' of 'torch._C.DoubleStorageBase' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexing.py:148(iloc)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:167(blknos)\n",
      "       20    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:1071(is_alive)\n",
      "      100    0.000    0.000    0.000    0.000 {method 'element_size' of 'torch._C.DoubleStorageBase' objects}\n",
      "      100    0.000    0.000    0.000    0.000 {method 'storage_offset' of 'torch._C._TensorBase' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/tempfile.py:144(__next__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/json/__init__.py:299(loads)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/config.py:116(_get_single_key)\n",
      "      228    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/multiarray.py:152(concatenate)\n",
      "        2    0.000    0.000    0.000    0.000 {method '_rebuild_blknos_and_blklocs' of 'pandas._libs.internals.BlockManager' objects}\n",
      "        8    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(copyto)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:147(__enter__)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method builtins.dir}\n",
      "       67    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:123(<listcomp>)\n",
      "      222    0.000    0.000    0.000    0.000 /home/bgray/neurotrack/notebooks/../data_prep/load.py:284(<listcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:678(_from_parts)\n",
      "       38    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/enum.py:313(__call__)\n",
      "      200    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/serialization.py:202(__enter__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:213(make_block)\n",
      "        1    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(mean)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/neurotrack/notebooks/../data_prep/collect.py:202(<dictcomp>)\n",
      "        7    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:505(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11937(dataoffset)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method io.open_code}\n",
      "        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:354(cache_from_source)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:686(_decr_instances)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:333(_screen_shape_linux)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3345(mean)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:2385(new_block)\n",
      "        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:376(cached)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/json/decoder.py:332(decode)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:658(_parse_args)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/urllib/parse.py:433(urlsplit)\n",
      "      242    0.000    0.000    0.000    0.000 {method 'values' of 'dict' objects}\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/cast.py:1573(construct_1d_object_array_from_listlike)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:158(is_object_dtype)\n",
      "        8    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10741(_read_value)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method _thread.start_new_thread}\n",
      "       64    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/generic.py:37(_check)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:2372(new_block_2d)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1494(_is_dtype_type)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:484(_get_cached)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_methods.py:164(_mean)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/utils.py:1086(_median_nancheck)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:2093(create_block_manager_from_blocks)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/cProfile.py:41(print_stats)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:157(_get_module_lock)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1209(is_float_dtype)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14604(extension)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/tempfile.py:133(rng)\n",
      "        7    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:222(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 {function SeedSequence.generate_state at 0x7f161c3b51f0}\n",
      "       62    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11302(get)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:21985(reshape_axes)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:534(infer_compression)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17888(<setcomp>)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:273(_is_ascii)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:64(parse_parts)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:479(get_adjustment)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/cast.py:1171(maybe_infer_to_datetimelike)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:265(__init__)\n",
      "        3    0.000    0.000    0.000    0.000 {method 'flatten' of 'numpy.ndarray' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/ipkernel.py:768(init_closure)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:372(abspath)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1446(format_dict)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:229(stringify_path)\n",
      "      129    0.000    0.000    0.000    0.000 {built-in method unicodedata.east_asian_width}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:683(_initialize_justify)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pstats.py:89(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:761(__init__)\n",
      "        5    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:400(format_interval)\n",
      "       80    0.000    0.000    0.000    0.000 {method 'join' of 'str' objects}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:102(acquire)\n",
      "      135    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_collections_abc.py:392(__subclasshook__)\n",
      "       20    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:1017(_wait_for_tstate_lock)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/construction.py:396(extract_array)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:5931(__finalize__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11830(_set_dimensions)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:881(__array__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:208(write_cols)\n",
      "       38    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/enum.py:631(__new__)\n",
      "        2    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(atleast_2d)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:2717(isna)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method fcntl.ioctl}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:5159(__getitem__)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:168(_number_format)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:334(normpath)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/random.py:94(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_ufunc_config.py:33(seterr)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_weakrefset.py:58(__iter__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:679(_get_free_pos)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/typing.py:768(__instancecheck__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pstats.py:99(init)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_ufunc_config.py:430(__enter__)\n",
      "      100    0.000    0.000    0.000    0.000 {method 'getvalue' of '_io.BytesIO' objects}\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1493(_get_spec)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:169(_expand_user)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:2688(_isnan)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/api.py:367(default_index)\n",
      "        8    0.000    0.000    0.000    0.000 {method 'match' of 're.Pattern' objects}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:140(has_mi_columns)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:112(_initialize_index_label)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/tensor.py:567(__len__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:117(splitext)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:21856(_squeeze_axes)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/config.py:596(_get_root)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:200(_has_aliases)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/random.py:123(seed)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/tempfile.py:147(<listcomp>)\n",
      "        4    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:127(_path_split)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:2401(check_ndim)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_weakrefset.py:106(remove)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:47(CSVFormatter)\n",
      "       11    0.000    0.000    0.000    0.000 {built-in method builtins.max}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:204(_need_to_save_header)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:110(__enter__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9477(is_memmappable)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/neurotrack/notebooks/../data_prep/load.py:300(<listcomp>)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/json/decoder.py:343(raw_decode)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:5205(_getitem_slice)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/base.py:54(shape)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:81(atleast_2d)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:106(release)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:121(_get_index_label_from_obj)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/config.py:649(_warn_if_deprecated)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:499(get_compression_method)\n",
      "       69    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:222(_verbose_message)\n",
      "        8    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/random.py:285(choice)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/range.py:202(_data)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/iostream.py:550(_is_master_process)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:154(_path_isfile)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:2305(maybe_coerce_values)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:179(data_index)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/construction.py:510(treat_as_nested)\n",
      "      140    0.000    0.000    0.000    0.000 {method 'rstrip' of 'str' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/neurotrack/notebooks/../data_prep/image.py:142(__init__)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14147(tell)\n",
      "       16    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_collections_abc.py:72(_check_methods)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:1823(_consolidate_inplace)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9418(is_contiguous)\n",
      "       20    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/config.py:610(_get_deprecated_option)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11783(<genexpr>)\n",
      "        1    0.000    0.000    0.000    0.000 <__array_function__ internals>:177(count_nonzero)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/typing.py:771(__subclasscheck__)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/iostream.py:505(parent_header)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:728(__fspath__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/util.py:171(register_after_fork)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:16500(CLASSIC_LE)\n",
      "        3    0.000    0.000    0.000    0.000 {method 'remove' of 'set' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:665(_initialize_sparsify)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/inference.py:398(is_dataclass)\n",
      "       12    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10829(<genexpr>)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:186(__format__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:213(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:425(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:553(_classify_pyc)\n",
      "       14    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1330(_path_importer_cache)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:151(__exit__)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:2334(get_block_type)\n",
      "       20    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:22849(product)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:689(spec_from_file_location)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:145(_path_is_mode_type)\n",
      "       28    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11250(add)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:78(acquire)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1335(is_extension_array_dtype)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9191(nbytes)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:1805(is_consolidated)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'strftime' of 'datetime.date' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9886(is_imagej)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pstats.py:118(load_stats)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:682(<setcomp>)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/_distutils_hack/__init__.py:102(find_spec)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/construction.py:393(_check_values_indices_shape_match)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/range.py:166(_simple_new)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method _csv.writer}\n",
      "       15    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/iostream.py:138(_event_pipe)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:718(__str__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:100(split)\n",
      "        8    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/construction.py:458(ensure_wrapped_if_datetimelike)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:4049(_validate_positional_slice)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/typing.py:255(inner)\n",
      "        1    0.000    0.000    0.000    0.000 {function Random.seed at 0x7f163b0033a0}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/construction.py:563(_ensure_2d)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:113(__exit__)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:228(expanduser)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9891(is_shaped)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/construction.py:683(_sanitize_str_dtypes)\n",
      "       35    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_collections_abc.py:302(__subclasshook__)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:58(__init__)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1435(_is_dtype)\n",
      "       28    0.000    0.000    0.000    0.000 {built-in method builtins.setattr}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:231(__call__)\n",
      "        8    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/random.py:250(_randbelow_with_getrandbits)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14640(is_file)\n",
      "       18    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11411(__contains__)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:153(__init__)\n",
      "        8    0.000    0.000    0.000    0.000 {pandas._libs.lib.is_scalar}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:347(<listcomp>)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:103(release)\n",
      "        6    0.000    0.000    0.000    0.000 {method 'acquire' of '_multiprocessing.SemLock' objects}\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_collections_abc.py:252(__subclasshook__)\n",
      "       10    0.000    0.000    0.000    0.000 {method 'tell' of '_io.BufferedReader' objects}\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/posixpath.py:60(isabs)\n",
      "       40    0.000    0.000    0.000    0.000 {built-in method _struct.calcsize}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/weakref.py:159(__setitem__)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:2107(_can_hold_na)\n",
      "        6    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:79(_unpack_uint32)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7214(set_keyframe)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_methods.py:67(_count_reduce_items)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:273(is_fsspec_url)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:218(_vhstack_dispatcher)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/typing.py:868(__new__)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/urllib/parse.py:428(_remove_unsafe_bytes_from_url)\n",
      "       12    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/range.py:892(__len__)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/range.py:308(dtype)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:945(parent)\n",
      "        2    0.000    0.000    0.000    0.000 {pandas._libs.lib.is_all_arraylike}\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1070(path_stats)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_bootlocale.py:33(getpreferredencoding)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:7167(maybe_extract_name)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/base.py:56(<genexpr>)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/genericpath.py:121(_splitext)\n",
      "       63    0.000    0.000    0.000    0.000 {built-in method builtins.ord}\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/config.py:637(_translate_key)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:1306(current_thread)\n",
      "        3    0.000    0.000    0.000    0.000 {built-in method now}\n",
      "       26    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7039(is_ndpi)\n",
      "       20    0.000    0.000    0.000    0.000 {built-in method __new__ of type object at 0x70d560}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:258(_acquire_restore)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_weakrefset.py:81(add)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/__init__.py:33(using_copy_on_write)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/_config/config.py:578(_select_options)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/codecs.py:309(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:586(_validate_timestamp_pyc)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7009(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:22135(pyramidize_series)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:193(nlevels)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/dataclasses.py:1045(is_dataclass)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9924(is_lsm)\n",
      "       28    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4149(filehandle)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/tokenize.py:325(find_cookie)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/os.py:670(__getitem__)\n",
      "        3    0.000    0.000    0.000    0.000 {method 'sub' of 're.Pattern' objects}\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:176(cb)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:246(__enter__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_weakrefset.py:26(__exit__)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:498(is_string_or_object_np_dtype)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9467(is_final)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/warnings.py:403(__init__)\n",
      "       14    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:863(__enter__)\n",
      "       14    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:867(__exit__)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:144(<lambda>)\n",
      "       10    0.000    0.000    0.000    0.000 {method 'rfind' of 'str' objects}\n",
      "        2    0.000    0.000    0.000    0.000 {pandas._libs.lib.is_iterator}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:249(__exit__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17266(TAG_READERS)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1157(__hash__)\n",
      "       22    0.000    0.000    0.000    0.000 {method 'lower' of 'str' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:791(truncate)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:4153(_set_is_copy)\n",
      "       19    0.000    0.000    0.000    0.000 {built-in method _thread.allocate_lock}\n",
      "       52    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/typing.py:1149(cast)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_ufunc_config.py:435(__exit__)\n",
      "       14    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7622(__bool__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:701(_format_parsed_parts)\n",
      "        7    0.000    0.000    0.000    0.000 {built-in method posix.getpid}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:6367(_validate_indexer)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:22627(stripnull)\n",
      "        8    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:129(<genexpr>)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/cProfile.py:51(create_stats)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/_ufunc_config.py:132(geterr)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:523(_get_axis)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17646(SAMPLE_DTYPES)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/neurotrack/notebooks/../data_prep/collect.py:168(<listcomp>)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/flags.py:49(__init__)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/urllib/parse.py:121(_coerce_args)\n",
      "        8    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:809(_reset_identity)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/typing.py:720(__hash__)\n",
      "       15    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_collections_abc.py:271(__subclasshook__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/functools.py:404(__get__)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1656(pandas_dtype)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:875(__len__)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:800(find_spec)\n",
      "       26    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10839(value)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:24468(bytes2str)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:261(_is_owned)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:130(_get_index_label_flat)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:723(_calc_max_cols_fitted)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexing.py:2609(check_dict_or_set_indexers)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7170(first)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:23495(parse_kwargs)\n",
      "        3    0.000    0.000    0.000    0.000 {built-in method builtins.id}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:139(__getattr__)\n",
      "       15    0.000    0.000    0.000    0.000 {built-in method builtins.divmod}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:266(_supports_unicode)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method fromtimestamp}\n",
      "       22    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:513(is_set)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:565(_ensure_array)\n",
      "       10    0.000    0.000    0.000    0.000 {built-in method sys.intern}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:2465(extend_blocks)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1389(is_ea_or_datetimelike_dtype)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10381(keyframe)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:1017(from_blocks)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9103(index)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:342(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/construction.py:644(_sanitize_ndim)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:725(find_spec)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:156(__init__)\n",
      "       10    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:142(classes)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:125(__eq__)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'take' of 'numpy.ndarray' objects}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1322(is_1d_only_ea_dtype)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:360(Barrier)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:255(_release_save)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/os.py:1073(__subclasshook__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/base.py:494(find)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11865(get_shape)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9819(imagej_description)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:293(splitroot)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_collections_abc.py:349(__subclasshook__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:734(_calc_max_rows_fitted)\n",
      "       10    0.000    0.000    0.000    0.000 {method 'partition' of 'str' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/arraysetops.py:125(_unpack_tuple)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/common.py:367(apply_if_callable)\n",
      "       21    0.000    0.000    0.000    0.000 {method 'append' of 'collections.deque' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:1813(_consolidate_check)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'fill' of 'numpy.ndarray' objects}\n",
      "        7    0.000    0.000    0.000    0.000 {method 'acquire' of '_thread.RLock' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_weakrefset.py:20(__enter__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:12010(size)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numeric.py:432(count_nonzero)\n",
      "       20    0.000    0.000    0.000    0.000 {built-in method _imp.acquire_lock}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:691(_from_parsed_parts)\n",
      "        8    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/multiarray.py:1079(copyto)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:1103(_maybe_memory_map)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method math.floor}\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:152(wrapper_setattr)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method numpy.seterrobj}\n",
      "        5    0.000    0.000    0.000    0.000 {built-in method builtins.min}\n",
      "       13    0.000    0.000    0.000    0.000 {built-in method _thread.get_ident}\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:767(_is_in_terminal)\n",
      "        3    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:143(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method _codecs.lookup}\n",
      "       20    0.000    0.000    0.000    0.000 {built-in method _imp.release_lock}\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:516(_check_name_wrapper)\n",
      "       10    0.000    0.000    0.000    0.000 {built-in method _stat.S_ISLNK}\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/pathlib.py:1049(_init)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10030(is_scanimage)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:529(_get_block_manager_axis)\n",
      "        4    0.000    0.000    0.000    0.000 {method 'add' of 'set' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/os.py:748(encode)\n",
      "        2    0.000    0.000    0.000    0.000 <string>:2(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:187(disable_on_exception)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11246(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/codecs.py:186(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1077(needs_i8_conversion)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:35(_new_module)\n",
      "        5    0.000    0.000    0.000    0.000 {method 'decode' of 'bytes' objects}\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method _locale.nl_langinfo}\n",
      "        2    0.000    0.000    0.000    0.000 <string>:1(__new__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:583(_dtype_to_subclass)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1459(get_dtype)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'startswith' of 'bytes' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9807(shaped_description)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:108(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:46(SemLock)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:689(_initialize_columns)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:509(_get_axis_number)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14617(closed)\n",
      "        7    0.000    0.000    0.000    0.000 {built-in method builtins.hash}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/flags.py:85(allows_duplicate_labels)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/common.py:1240(<lambda>)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:167(colour)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17428(TAG_ENUM)\n",
      "       12    0.000    0.000    0.000    0.000 {method 'replace' of 'str' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9186(size)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/torch/tensor.py:24(<genexpr>)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:163(_initialize_chunksize)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/inference.py:99(is_file_like)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17376(TAG_TUPLE)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/blocks.py:892(iget)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:5991(__setattr__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/dtypes/inference.py:328(is_hashable)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method posix.getcwd}\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:226(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:210(Condition)\n",
      "        6    0.000    0.000    0.000    0.000 {built-in method time.time}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1153(_comparable)\n",
      "        6    0.000    0.000    0.000    0.000 {method 'get' of 'ContextVar' objects}\n",
      "        6    0.000    0.000    0.000    0.000 {method 'release' of '_multiprocessing.SemLock' objects}\n",
      "        3    0.000    0.000    0.000    0.000 {method 'update' of 'dict' objects}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:104(header)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11370(__getitem__)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:92(na_rep)\n",
      "       16    0.000    0.000    0.000    0.000 {method 'getrandbits' of '_random.Random' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:222(__eq__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9919(is_stk)\n",
      "        4    0.000    0.000    0.000    0.000 {built-in method numpy.geterrobj}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/construction.py:636(_sanitize_non_ordered)\n",
      "       13    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:68(_relax_case)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/ma/core.py:6462(isMaskedArray)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:112(__format__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_weakrefset.py:16(__init__)\n",
      "        3    0.000    0.000    0.000    0.000 {built-in method _imp.is_frozen}\n",
      "        6    0.000    0.000    0.000    0.000 {method 'write' of '_io.StringIO' objects}\n",
      "        6    0.000    0.000    0.000    0.000 {method '__enter__' of '_thread.lock' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:252(_is_utf)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:108(index)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17311(TAG_LOAD)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method _imp._fix_co_filename}\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7205(useframes)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17398(TAG_ATTRIBUTES)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:96(float_format)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/weakref.py:323(__new__)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method _codecs.lookup_error}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9875(is_subsampled)\n",
      "        6    0.000    0.000    0.000    0.000 {pandas._libs.lib.is_integer}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/codecs.py:260(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9845(is_subifd)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:982(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10089(is_ndpi)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/construction.py:197(mgr_to_mgr)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/weakref.py:328(__init__)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'ravel' of 'numpy.generic' objects}\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:999(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11426(__len__)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'encode' of 'str' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:1177(_make_invoke_excepthook)\n",
      "        6    0.000    0.000    0.000    0.000 {built-in method from_bytes}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7209(keyframe)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/context.py:233(get_context)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:10094(is_philips)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method _imp.is_builtin}\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method numpy.core._multiarray_umath.count_nonzero}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:734(_newname)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:17603(DATA_FORMATS)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/ipykernel/iostream.py:364(fileno)\n",
      "        7    0.000    0.000    0.000    0.000 {method 'release' of '_thread.RLock' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/range.py:249(start)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:633(is_truncated_horizontally)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/_weakrefset.py:52(_commit_removals)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexing.py:2596(need_slice)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'fileno' of '_io.BufferedReader' objects}\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:11846(shape)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/six.py:194(find_spec)\n",
      "        4    0.000    0.000    0.000    0.000 {method 'lstrip' of 'str' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:14589(name)\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:100(decimal)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method builtins.locals}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:1110(daemon)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numeric.py:574(_argwhere_dispatcher)\n",
      "        4    0.000    0.000    0.000    0.000 {method 'end' of 're.Match' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:338(attrs)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'find' of 'str' objects}\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1147(__del__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:90(_make_methods)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:1025(__init__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/range.py:257(stop)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/urllib/parse.py:110(_noop)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:183(blklocs)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:699(_initialize_colspace)\n",
      "        3    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:163(colour)\n",
      "        5    0.000    0.000    0.000    0.000 {built-in method builtins.abs}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:1070(<genexpr>)\n",
      "        1    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:937(_sanity_check)\n",
      "        6    0.000    0.000    0.000    0.000 {method '__exit__' of '_thread.lock' objects}\n",
      "        6    0.000    0.000    0.000    0.000 {method 'release' of '_thread.lock' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/csvs.py:134(_initialize_quotechar)\n",
      "        4    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/generic.py:359(flags)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'difference' of 'set' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:233(items)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/frame.py:632(_constructor)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method _stat.S_ISDIR}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/range.py:264(step)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:637(is_truncated_vertically)\n",
      "        2    0.000    0.000    0.000    0.000 {pandas._libs.lib.is_float}\n",
      "        6    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9113(keyframe)\n",
      "        4    0.000    0.000    0.000    0.000 {method 'strip' of 'bytes' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:7200(useframes)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:12073(__len__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:2950(_prod_dispatcher)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:4144(byteorder)\n",
      "        8    0.000    0.000    0.000    0.000 {method 'bit_length' of 'int' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:9944(is_vista)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:931(dtype)\n",
      "        2    0.000    0.000    0.000    0.000 {built-in method _weakref.proxy}\n",
      "        4    0.000    0.000    0.000    0.000 {method 'reverse' of 'list' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/construction.py:703(_maybe_repeat)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:1582(name)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/utils.py:282(_screen_shape_wrapper)\n",
      "        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n",
      "        4    0.000    0.000    0.000    0.000 {built-in method builtins.callable}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:4937(_values)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap>:397(has_location)\n",
      "        2    0.000    0.000    0.000    0.000 {method 'setter' of 'property' objects}\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:15066(__enter__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/util.py:48(debug)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:670(_initialize_formatters)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:321(Event)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/urllib/parse.py:410(_checknetloc)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/flags.py:53(allows_duplicate_labels)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/threading.py:1095(daemon)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/internals/managers.py:333(<dictcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:123(Semaphore)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/dateutil/tz/tz.py:74(utcoffset)\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:1024(get_filename)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/arraysetops.py:133(_unique_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:671(_partition_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:3340(_mean_dispatcher)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:15069(__exit__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/shape_base.py:77(_atleast_2d_dispatcher)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/formats/format.py:753(_adjust_max_rows)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/io/common.py:134(__enter__)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:1888(_nonzero_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/importlib_metadata/_compat.py:44(find_spec)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/pandas/core/indexes/base.py:1877(nlevels)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:98(<listcomp>)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tqdm/std.py:1301(<lambda>)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/process.py:37(current_process)\n",
      "        1    0.000    0.000    0.000    0.000 {built-in method atexit.register}\n",
      "        2    0.000    0.000    0.000    0.000 <frozen importlib._bootstrap_external>:834(create_module)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:142(BoundedSemaphore)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:159(Lock)\n",
      "        2    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/tifffile/tifffile.py:6470(__enter__)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/context.py:197(get_start_method)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/lib/function_base.py:3769(_median_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/numeric.py:428(_count_nonzero_dispatcher)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/multiprocessing/synchronize.py:184(RLock)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/_distutils_hack/__init__.py:109(<lambda>)\n",
      "        1    0.000    0.000    0.000    0.000 /home/bgray/anaconda3/envs/neurotrack/lib/python3.8/contextlib.py:59(_recreate_cm)\n",
      "\n",
      "\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<pstats.Stats at 0x7f156035e970>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stats = pstats.Stats(pr)\n",
    "stats.sort_stats('cumulative').print_stats()\n",
    "stats.print_stats()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'case1-slide2-section1-left-cell1_merge_c2.v3dpbd.swc'"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "swc_files[104]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "loading file: /home/brysongray/data/gold166/e_checked6_chick_uw/DONE_case1-slide2-section1-left-cell1_merge_c2/case1-slide2-section1-left-cell1_merge_c2.v3dpbd.swc\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 78.0350, 603.8480, 556.5220], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 78.0350, 598.4050, 528.3160], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 78.0350, 594.4450, 517.9240], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 78.0350, 593.9520, 517.9240], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 78.0350, 592.9610, 500.6050], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 78.0350, 592.9610, 500.1100], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 76.9550, 598.4050, 476.8520], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 76.9550, 598.4050, 476.3580], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 76.9550, 598.9000, 463.9870], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 75.8760, 596.4240, 445.6780], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 76.9550, 274.7840, 333.3510], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 75.8760, 280.2270, 336.3200], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 76.9550, 209.9600, 322.9590], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 76.9550, 215.8980, 327.4130], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 76.9550, 219.8570, 332.3610], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 76.9550, 221.3420, 338.7940], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 76.9550, 231.7330, 343.2480], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 76.9550, 248.0630, 347.2070], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 76.9550, 248.5570, 347.2070], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 75.8760, 248.0630, 333.8460], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 75.8760, 249.0530, 331.8660], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 75.8760, 249.0530, 331.3710], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 75.8760, 253.5060, 325.4340], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 75.8760, 254.0000, 325.4340], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 75.8760, 263.4030, 329.8870], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 75.8760, 263.8970, 329.8870], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 75.8760, 267.8550, 337.8040], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 75.8760, 264.3920, 344.2370], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 75.8760, 278.2480, 348.6910], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 75.8760, 278.7420, 348.6910], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 75.8760, 287.1550, 348.1950], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n",
      "/home/brysongray/neurotrack/notebooks/../data_prep/image.py:202: UserWarning: Center tensor([ 75.8760, 287.1550, 347.7010], dtype=torch.float64) is out of bounds for image shape torch.Size([76, 1024, 1024]). Translating to the nearest valid index.\n",
      "  # get amount of padding for each face\n"
     ]
    }
   ],
   "source": [
    "swc_file = '/home/brysongray/data/gold166/e_checked6_chick_uw/DONE_case1-slide2-section1-left-cell1_merge_c2/case1-slide2-section1-left-cell1_merge_c2.v3dpbd.swc'\n",
    "img_file = '/home/brysongray/data/gold166_tifs/case1-slide2-section1-left-cell1_merge_c2.tif'\n",
    "\n",
    "swc_list = load.swc(swc_file)\n",
    "img = tf.imread(img_file)\n",
    "\n",
    "shape = img.shape\n",
    "del img\n",
    "\n",
    "sections, sections_graph = load.parse_swc(swc_list)\n",
    "branches, terminals = load.get_critical_points(swc_list, sections)\n",
    "\n",
    "segments = []\n",
    "for section in sections.values():\n",
    "    segments.append(section)\n",
    "segments = np.concatenate(segments)\n",
    "\n",
    "density = draw.draw_neuron_density(segments, shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[63], line 8\u001b[0m\n\u001b[1;32m      5\u001b[0m img_files \u001b[38;5;241m=\u001b[39m os\u001b[38;5;241m.\u001b[39mlistdir(img_dir)\n\u001b[1;32m      7\u001b[0m i \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m104\u001b[39m\n\u001b[0;32m----> 8\u001b[0m swc_list \u001b[38;5;241m=\u001b[39m load\u001b[38;5;241m.\u001b[39mswc(os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39mjoin(swc_dir, \u001b[43mswc_files\u001b[49m\u001b[43m[\u001b[49m\u001b[43mi\u001b[49m\u001b[43m]\u001b[49m), verbose\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m)\n\u001b[1;32m      9\u001b[0m img_name \u001b[38;5;241m=\u001b[39m [img_file \u001b[38;5;28;01mfor\u001b[39;00m img_file \u001b[38;5;129;01min\u001b[39;00m img_files \u001b[38;5;28;01mif\u001b[39;00m img_file\u001b[38;5;241m.\u001b[39msplit(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124m.tif\u001b[39m\u001b[38;5;124m'\u001b[39m)[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;129;01min\u001b[39;00m swc_files[i]]\n\u001b[1;32m     10\u001b[0m img_name \u001b[38;5;241m=\u001b[39m img_name[\u001b[38;5;241m0\u001b[39m]\n",
      "\u001b[0;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "swc_dir = os.path.expanduser(\"~/data/gold166\")\n",
    "swc_files = os.listdir(swc_dir)\n",
    "\n",
    "img_dir = os.path.expanduser(\"~/data/gold166_tifs_scaled/\")\n",
    "img_files = os.listdir(img_dir)\n",
    "\n",
    "i = 104\n",
    "swc_list = load.swc(os.path.join(swc_dir, swc_files[i]), verbose=False)\n",
    "img_name = [img_file for img_file in img_files if img_file.split('.tif')[0] in swc_files[i]]\n",
    "img_name = img_name[0]\n",
    "\n",
    "img_path = os.path.join(img_dir, img_name)\n",
    "img = tf.imread(img_path)\n",
    "shape = img.shape\n",
    "del img\n",
    "\n",
    "sections, sections_graph = load.parse_swc(swc_list)\n",
    "branches, terminals = load.get_critical_points(swc_list, sections)\n",
    "\n",
    "segments = []\n",
    "for section in sections.values():\n",
    "    segments.append(section)\n",
    "segments = np.concatenate(segments)\n",
    "\n",
    "density = draw.draw_neuron_density(segments, shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      " 76%|███████▌  | 104/137 [14:27<04:35,  8.34s/it] \n"
     ]
    },
    {
     "ename": "RuntimeError",
     "evalue": "The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 0",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mRuntimeError\u001b[0m                              Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[54], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[43mcollect\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43msave_coordinates_and_annotations\u001b[49m\u001b[43m(\u001b[49m\u001b[43mswc_dir\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mimg_dir\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mout_dir\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msamples_per_neuron\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m100\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mseed\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/neurotrack/notebooks/../data_prep/collect.py:192\u001b[0m, in \u001b[0;36msave_coordinates_and_annotations\u001b[0;34m(swc_dir, img_dir, out_dir, samples_per_neuron, seed)\u001b[0m\n\u001b[1;32m    189\u001b[0m     segments\u001b[38;5;241m.\u001b[39mappend(section)\n\u001b[1;32m    190\u001b[0m segments \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mconcatenate(segments)\n\u001b[0;32m--> 192\u001b[0m density \u001b[38;5;241m=\u001b[39m \u001b[43mdraw\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdraw_neuron_density\u001b[49m\u001b[43m(\u001b[49m\u001b[43msegments\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    193\u001b[0m mask \u001b[38;5;241m=\u001b[39m draw\u001b[38;5;241m.\u001b[39mdraw_neuron_mask(density, threshold\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m5.0\u001b[39m)\n\u001b[1;32m    194\u001b[0m \u001b[38;5;28;01mdel\u001b[39;00m density\n",
      "File \u001b[0;32m~/neurotrack/notebooks/../data_prep/draw.py:39\u001b[0m, in \u001b[0;36mdraw_neuron_density\u001b[0;34m(segments, shape, width)\u001b[0m\n\u001b[1;32m     37\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m s \u001b[38;5;129;01min\u001b[39;00m segments:\n\u001b[1;32m     38\u001b[0m         width \u001b[38;5;241m=\u001b[39m ((s[\u001b[38;5;241m0\u001b[39m,\u001b[38;5;241m3\u001b[39m]\u001b[38;5;241m+\u001b[39ms[\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m3\u001b[39m])\u001b[38;5;241m/\u001b[39m\u001b[38;5;241m2\u001b[39m)\u001b[38;5;241m.\u001b[39mitem()\n\u001b[0;32m---> 39\u001b[0m         \u001b[43mdensity\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mdraw_line_segment\u001b[49m\u001b[43m(\u001b[49m\u001b[43ms\u001b[49m\u001b[43m[\u001b[49m\u001b[43m:\u001b[49m\u001b[43m,\u001b[49m\u001b[43m:\u001b[49m\u001b[38;5;241;43m3\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mwidth\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mwidth\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mchannel\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m)\u001b[49m\n\u001b[1;32m     40\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m     41\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m s \u001b[38;5;129;01min\u001b[39;00m segments:\n",
      "File \u001b[0;32m~/neurotrack/notebooks/../data_prep/image.py:282\u001b[0m, in \u001b[0;36mImage.draw_line_segment\u001b[0;34m(self, segment, width, channel, value, binary)\u001b[0m\n\u001b[1;32m    280\u001b[0m     patch[channel] \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mwhere(X\u001b[38;5;241m*\u001b[39mpatch[channel] \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m0\u001b[39m, torch\u001b[38;5;241m.\u001b[39mminimum(X,patch[channel]), torch\u001b[38;5;241m.\u001b[39mmaximum(X,patch[channel]))\n\u001b[1;32m    281\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 282\u001b[0m     patch[channel] \u001b[38;5;241m=\u001b[39m \u001b[43mtorch\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mmaximum\u001b[49m\u001b[43m(\u001b[49m\u001b[43mX\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpatch\u001b[49m\u001b[43m[\u001b[49m\u001b[43mchannel\u001b[49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    283\u001b[0m new_patch \u001b[38;5;241m=\u001b[39m patch[channel]\u001b[38;5;241m.\u001b[39mclone()\n\u001b[1;32m    285\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m old_patch, new_patch\n",
      "\u001b[0;31mRuntimeError\u001b[0m: The size of tensor a (3) must match the size of tensor b (0) at non-singleton dimension 0"
     ]
    }
   ],
   "source": [
    "collect.save_coordinates_and_annotations(swc_dir, img_dir, out_dir, samples_per_neuron=100, seed=0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "  0%|          | 0/1 [00:00<?, ?it/s]/home/bgray/anaconda3/envs/neurotrack/lib/python3.8/site-packages/numpy/core/fromnumeric.py:57: UserWarning: This overload of nonzero is deprecated:\n",
      "\tnonzero()\n",
      "Consider using one of the following signatures instead:\n",
      "\tnonzero(*, bool as_tuple) (Triggered internally at  /opt/conda/conda-bld/pytorch_1607370117127/work/torch/csrc/utils/python_arg_parser.cpp:882.)\n",
      "  return bound(*args, **kwds)\n",
      "  0%|          | 0/1 [00:54<?, ?it/s]\n"
     ]
    },
    {
     "ename": "NameError",
     "evalue": "name 'resolution' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[4], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;28;01mwith\u001b[39;00m cProfile\u001b[38;5;241m.\u001b[39mProfile() \u001b[38;5;28;01mas\u001b[39;00m pr:\n\u001b[0;32m----> 2\u001b[0m     \u001b[43mcollect\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mspherical_patch_dataset\u001b[49m\u001b[43m(\u001b[49m\u001b[43mimg_dir\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mimg_dir\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mswc_dir\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mswc_dir\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mout_dir\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mout_dir\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msamples_per_neuron\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;241;43m100\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43msync\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m      3\u001b[0m     stats \u001b[38;5;241m=\u001b[39m pstats\u001b[38;5;241m.\u001b[39mStats(pr)\n\u001b[1;32m      4\u001b[0m     stats\u001b[38;5;241m.\u001b[39msort_stats(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcumulative\u001b[39m\u001b[38;5;124m'\u001b[39m)\u001b[38;5;241m.\u001b[39mprint_stats()\n",
      "File \u001b[0;32m~/neurotrack/notebooks/../data_prep/collect.py:204\u001b[0m, in \u001b[0;36mspherical_patch_dataset\u001b[0;34m(swc_dir, img_dir, out_dir, samples_per_neuron, sync, seed)\u001b[0m\n\u001b[1;32m    200\u001b[0m     \u001b[38;5;28;01mdel\u001b[39;00m density\n\u001b[1;32m    202\u001b[0m     branch_coords, non_branch_coords \u001b[38;5;241m=\u001b[39m random_points_from_mask(mask, branches, samples_per_neuron, rng\u001b[38;5;241m=\u001b[39mrng)\n\u001b[0;32m--> 204\u001b[0m     annotations, obs_id \u001b[38;5;241m=\u001b[39m \u001b[43msave_spherical_patches\u001b[49m\u001b[43m(\u001b[49m\u001b[43mimg\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbranch_coords\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mnon_branch_coords\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mout_dir\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstart_id\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mobs_id\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mannotations\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mannotations\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    206\u001b[0m \u001b[38;5;66;03m# save annotations\u001b[39;00m\n\u001b[1;32m    207\u001b[0m \u001b[38;5;66;03m# split into test and training data\u001b[39;00m\n\u001b[1;32m    208\u001b[0m name \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mgold166\u001b[39m\u001b[38;5;124m\"\u001b[39m\n",
      "File \u001b[0;32m~/neurotrack/notebooks/../data_prep/collect.py:125\u001b[0m, in \u001b[0;36msave_spherical_patches\u001b[0;34m(img, branch_coords, non_branch_coords, out_dir, start_id, annotations)\u001b[0m\n\u001b[1;32m    118\u001b[0m permutations \u001b[38;5;241m=\u001b[39m [[\u001b[38;5;241m0\u001b[39m,\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m2\u001b[39m],\n\u001b[1;32m    119\u001b[0m                 [\u001b[38;5;241m0\u001b[39m,\u001b[38;5;241m2\u001b[39m,\u001b[38;5;241m1\u001b[39m],\n\u001b[1;32m    120\u001b[0m                 [\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m2\u001b[39m,\u001b[38;5;241m0\u001b[39m],\n\u001b[1;32m    121\u001b[0m                 [\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m0\u001b[39m,\u001b[38;5;241m2\u001b[39m],\n\u001b[1;32m    122\u001b[0m                 [\u001b[38;5;241m2\u001b[39m,\u001b[38;5;241m0\u001b[39m,\u001b[38;5;241m1\u001b[39m],\n\u001b[1;32m    123\u001b[0m                 [\u001b[38;5;241m2\u001b[39m,\u001b[38;5;241m1\u001b[39m,\u001b[38;5;241m0\u001b[39m]]\n\u001b[1;32m    124\u001b[0m \u001b[38;5;66;03m# Create meshgrid for spherical coordinates\u001b[39;00m\n\u001b[0;32m--> 125\u001b[0m theta_res, phi_res \u001b[38;5;241m=\u001b[39m \u001b[43mresolution\u001b[49m\n\u001b[1;32m    126\u001b[0m theta \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mlinspace(\u001b[38;5;241m0\u001b[39m, np\u001b[38;5;241m.\u001b[39mpi, theta_res)\n\u001b[1;32m    127\u001b[0m phi \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mlinspace(\u001b[38;5;241m0\u001b[39m, \u001b[38;5;241m2\u001b[39m\u001b[38;5;241m*\u001b[39mnp\u001b[38;5;241m.\u001b[39mpi, phi_res)\n",
      "\u001b[0;31mNameError\u001b[0m: name 'resolution' is not defined"
     ]
    }
   ],
   "source": [
    "with cProfile.Profile() as pr:\n",
    "    collect.spherical_patch_dataset(img_dir=img_dir, swc_dir=swc_dir, out_dir=out_dir, samples_per_neuron=100, sync=False)\n",
    "    stats = pstats.Stats(pr)\n",
    "    stats.sort_stats('cumulative').print_stats()\n",
    "    stats.print_stats()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "observations = os.listdir(os.path.join(out_dir, \"observations\"))\n",
    "obs = observations[0]\n",
    "img = torch.load(os.path.join(out_dir,\"observations\", obs))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f3f94295400>"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.imshow(img[36])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "# swc_file = swc_files[1]\n",
    "# swc_list = load.swc(os.path.join(swc_dir, swc_file), verbose=False)\n",
    "swc_list = load.swc(os.path.join(swc_dir, 'GMR_57C10_AD_01-Two_recombinase_flipouts_A-f-A-20111108_4_E3-left_optic_lobe.v3draw.extract_1.v3dpbd.swc'), verbose=False)\n",
    "\n",
    "sections, section_graph = parse_swc(swc_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# display the image with a branch point\n",
    "plt.imshow(img[56])\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "'GMR_57C10_AD_01-Two_recombinase_flipouts_A-f-A-20111108_4_E3-left_optic_lobe.v3draw.extract_1.v3dpbd.swc'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "44",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[13], line 18\u001b[0m\n\u001b[1;32m     14\u001b[0m shape \u001b[38;5;241m=\u001b[39m img\u001b[38;5;241m.\u001b[39mshape\n\u001b[1;32m     16\u001b[0m \u001b[38;5;28;01mdel\u001b[39;00m img\n\u001b[0;32m---> 18\u001b[0m sections, graph, branches, terminals, scale \u001b[38;5;241m=\u001b[39m \u001b[43mload\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mparse_swc_list\u001b[49m\u001b[43m(\u001b[49m\u001b[43mswc_list\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43madjust\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\n\u001b[1;32m     20\u001b[0m segments \u001b[38;5;241m=\u001b[39m []\n\u001b[1;32m     21\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m section \u001b[38;5;129;01min\u001b[39;00m sections\u001b[38;5;241m.\u001b[39mvalues():\n",
      "File \u001b[0;32m~/neurotrack/notebooks/../data_prep/load.py:170\u001b[0m, in \u001b[0;36mparse_swc_list\u001b[0;34m(swc_list, adjust, transpose)\u001b[0m\n\u001b[1;32m    168\u001b[0m     section_graph[section_id] \u001b[38;5;241m=\u001b[39m []\n\u001b[1;32m    169\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(value) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[0;32m--> 170\u001b[0m     \u001b[43msections\u001b[49m\u001b[43m[\u001b[49m\u001b[43msection_id\u001b[49m\u001b[43m]\u001b[49m\u001b[38;5;241m.\u001b[39mappend([swc_list[key\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m][\u001b[38;5;241m2\u001b[39m:\u001b[38;5;241m6\u001b[39m], swc_list[value[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;241m-\u001b[39m\u001b[38;5;241m1\u001b[39m][\u001b[38;5;241m2\u001b[39m:\u001b[38;5;241m6\u001b[39m]])\n\u001b[1;32m    171\u001b[0m \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[1;32m    172\u001b[0m     \u001b[38;5;66;03m# Edit 2/5/25: Every branch spawns new sections and terminates the parent section\u001b[39;00m\n\u001b[1;32m    173\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mlen\u001b[39m(sections[section_id]) \u001b[38;5;241m==\u001b[39m \u001b[38;5;241m0\u001b[39m: \u001b[38;5;66;03m# The section is empty. This might happen if the root node is also a branch.\u001b[39;00m\n\u001b[1;32m    174\u001b[0m         \u001b[38;5;66;03m# In this case do not terminate the section\u001b[39;00m\n",
      "\u001b[0;31mKeyError\u001b[0m: 44"
     ]
    }
   ],
   "source": [
    "samples_per_neuron = 1000\n",
    "rng = np.random.default_rng(0)\n",
    "\n",
    "annotations = {}\n",
    "obs_id = 0\n",
    "for swc_file in swc_files:\n",
    "    swc_list = load.swc(os.path.join(swc_dir, swc_file), verbose=False)\n",
    "    img_name = [img_file for img_file in image_files if img_file.split('.tif')[0] in swc_file]\n",
    "    try:\n",
    "        img_name = img_name[0]\n",
    "    except IndexError:\n",
    "        continue\n",
    "    img_path = os.path.join(image_dir, img_name)\n",
    "    img = tf.imread(img_path)\n",
    "    shape = img.shape\n",
    "\n",
    "    del img\n",
    "\n",
    "    sections, sections_graph = load.parse_swc(swc_list)\n",
    "    branches, terminals = load.get_critical_points(swc_list, sections)\n",
    "    segments = []\n",
    "    for section in sections.values():\n",
    "        segments.append(section)\n",
    "    segments = torch.concatenate(segments)\n",
    "\n",
    "\n",
    "    density = draw.draw_neuron_density(segments, shape)\n",
    "    mask = draw.draw_neuron_mask(density, threshold=5.0)\n",
    "    del density\n",
    "\n",
    "    branch_coords, non_branch_coords = collect.random_points_from_mask(mask, branches, samples_per_neuron, rng=rng)\n",
    "    \n",
    "    annotations, obs_id = collect.save_spherical_patches(img_path, branch_coords, non_branch_coords, out_dir, start_id=obs_id, annotations=annotations)\n",
    "\n",
    "# save annotations\n",
    "# split into test and training data\n",
    "name = \"gold166\"\n",
    "data_permutation = torch.randperm(len(annotations))\n",
    "test_idxs = data_permutation[:len(data_permutation)//5].tolist()\n",
    "training_idxs = data_permutation[len(data_permutation)//5:].tolist()\n",
    "training_annotations = {list(annotations)[i]: list(annotations.values())[i] for i in training_idxs}\n",
    "test_annotations = {list(annotations)[i]: list(annotations.values())[i] for i in test_idxs}\n",
    "# save \n",
    "df = pd.DataFrame.from_dict(training_annotations, orient=\"index\")\n",
    "df.to_csv(os.path.join(out_dir, f\"branch_classifier_{name}_{date}_training_labels.csv\"))\n",
    "df = pd.DataFrame.from_dict(test_annotations, orient=\"index\")\n",
    "df.to_csv(os.path.join(out_dir, f\"branch_classifier_{name}_{date}_test_labels.csv\"))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### View some example input images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[14], line 2\u001b[0m\n\u001b[1;32m      1\u001b[0m observations \u001b[38;5;241m=\u001b[39m os\u001b[38;5;241m.\u001b[39mlistdir(os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39mjoin(out_dir, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobservations\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n\u001b[0;32m----> 2\u001b[0m training_annotations \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mread_csv(\u001b[43mglob\u001b[49m\u001b[43m(\u001b[49m\u001b[43mos\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mpath\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mjoin\u001b[49m\u001b[43m(\u001b[49m\u001b[43mout_dir\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43m*_labels.csv\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m0\u001b[39;49m\u001b[43m]\u001b[49m)\n\u001b[1;32m      3\u001b[0m ids \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mrandom\u001b[38;5;241m.\u001b[39mchoice(\u001b[38;5;28mlen\u001b[39m(training_annotations), size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m9\u001b[39m)\n\u001b[1;32m      4\u001b[0m sample \u001b[38;5;241m=\u001b[39m training_annotations\u001b[38;5;241m.\u001b[39miloc[ids]\n",
      "\u001b[0;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "observations = os.listdir(os.path.join(out_dir, \"observations\"))\n",
    "training_annotations = pd.read_csv(glob(os.path.join(out_dir, \"*_labels.csv\"))[0])\n",
    "ids = np.random.choice(len(training_annotations), size=9)\n",
    "sample = training_annotations.iloc[ids]\n",
    "\n",
    "fig, ax = plt.subplots(3,3)\n",
    "ax = ax.flatten()\n",
    "for i in range(len(ax)):\n",
    "    img = torch.load(os.path.join(out_dir,\"observations\", sample.iloc[i,0]), weights_only=True)\n",
    "    shell = 5 # type: ignore\n",
    "    ax[i].imshow(img[shell])#, vmin=0, vmax=.0)\n",
    "    ax[i].set_title(f\"label: {sample.iloc[i,1].item()}\")\n",
    "    ax[i].set_axis_off()\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "observations = os.listdir(os.path.join(out_dir, \"observations\"))\n",
    "training_annotations = pd.read_csv(glob(os.path.join(out_dir, \"*_labels.csv\"))[0])\n",
    "ids = np.random.choice(len(training_annotations), size=9)\n",
    "sample = training_annotations.iloc[ids]\n",
    "\n",
    "fig, ax = plt.subplots(3,3)\n",
    "ax = ax.flatten()\n",
    "for i in range(len(ax)):\n",
    "    img = torch.load(os.path.join(out_dir,\"observations\", sample.iloc[i,0]), weights_only=True)\n",
    "    shell = 5 # type: ignore\n",
    "    ax[i].imshow(img[shell])\n",
    "    ax[i].set_title(f\"label: {sample.iloc[i,1].item()}\")\n",
    "    ax[i].set_axis_off()\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train branch classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Instantiate dataloader for training and test datasets\n",
    "Dataloaders use a weighted random sampler to balance classes. Additionally, the training dataset\\\n",
    " adds a random permutation and flip to the image patch at retrieval."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# set source data files paths\n",
    "name = \"gold166\"\n",
    "date = \"03-07-25\"\n",
    "\n",
    "training_labels_file = os.path.join(out_dir, f\"branch_classifier_{name}_{date}_training_labels.csv\")\n",
    "test_labels_file = os.path.join(out_dir, f\"branch_classifier_{name}_{date}_test_labels.csv\")\n",
    "img_dir = os.path.join(out_dir, \"observations\")\n",
    "\n",
    "# instantiate training and test datasets\n",
    "transform = branch_classifier.transform_spherical_patch # random permutation and flip\n",
    "training_data = branch_classifier.StateData(labels_file=training_labels_file,\n",
    "                          img_dir=img_dir,\n",
    "                          transform=transform)\n",
    "test_data = branch_classifier.StateData(labels_file=test_labels_file,\n",
    "                          img_dir=img_dir)\n",
    "\n",
    "# instantiate dataloaders\n",
    "batchsize=64\n",
    "training_dataloader = DataLoader(training_data, batch_size=batchsize)\n",
    "test_dataloader = DataLoader(test_data, batch_size=batchsize)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1\n",
      "-------------------------------\n",
      "Accuracy: 39.0625, Loss: 0.703391  [   64/  800]\n",
      "Accuracy: 62.5, Loss: 0.669111  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 56.0%, Avg loss: 4.881491 \n",
      "           Precision: 0.494, Recall: 0.437\n",
      "Epoch 2\n",
      "-------------------------------\n",
      "Accuracy: 53.125, Loss: 0.704802  [   64/  800]\n",
      "Accuracy: 70.3125, Loss: 0.652787  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 61.5%, Avg loss: 0.599980 \n",
      "           Precision: 0.534, Recall: 0.897\n",
      "Epoch 3\n",
      "-------------------------------\n",
      "Accuracy: 68.75, Loss: 0.640434  [   64/  800]\n",
      "Accuracy: 71.875, Loss: 0.638740  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 56.0%, Avg loss: 0.652177 \n",
      "           Precision: 0.497, Recall: 0.966\n",
      "Epoch 4\n",
      "-------------------------------\n",
      "Accuracy: 56.25, Loss: 0.658557  [   64/  800]\n",
      "Accuracy: 71.875, Loss: 0.626720  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 61.0%, Avg loss: 0.633813 \n",
      "           Precision: 0.529, Recall: 0.943\n",
      "Epoch 5\n",
      "-------------------------------\n",
      "Accuracy: 60.9375, Loss: 0.640943  [   64/  800]\n",
      "Accuracy: 67.1875, Loss: 0.637693  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 57.5%, Avg loss: 0.658243 \n",
      "           Precision: 0.509, Recall: 0.655\n",
      "Epoch 6\n",
      "-------------------------------\n",
      "Accuracy: 62.5, Loss: 0.606103  [   64/  800]\n",
      "Accuracy: 65.625, Loss: 0.606612  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 55.5%, Avg loss: 0.657900 \n",
      "           Precision: 0.494, Recall: 0.989\n",
      "Epoch 7\n",
      "-------------------------------\n",
      "Accuracy: 70.3125, Loss: 0.595890  [   64/  800]\n",
      "Accuracy: 68.75, Loss: 0.576913  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 57.0%, Avg loss: 0.701318 \n",
      "           Precision: 0.526, Recall: 0.115\n",
      "Epoch 8\n",
      "-------------------------------\n",
      "Accuracy: 81.25, Loss: 0.452802  [   64/  800]\n",
      "Accuracy: 71.875, Loss: 0.559934  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 68.0%, Avg loss: 0.557682 \n",
      "           Precision: 0.619, Recall: 0.690\n",
      "Epoch 9\n",
      "-------------------------------\n",
      "Accuracy: 75.0, Loss: 0.478215  [   64/  800]\n",
      "Accuracy: 71.875, Loss: 0.531449  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 61.5%, Avg loss: 0.684491 \n",
      "           Precision: 0.778, Recall: 0.161\n",
      "Epoch 10\n",
      "-------------------------------\n",
      "Accuracy: 89.0625, Loss: 0.450271  [   64/  800]\n",
      "Accuracy: 75.0, Loss: 0.540185  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 55.5%, Avg loss: 1.540290 \n",
      "           Precision: 0.000, Recall: 0.000\n",
      "Epoch 11\n",
      "-------------------------------\n",
      "Accuracy: 85.9375, Loss: 0.370702  [   64/  800]\n",
      "Accuracy: 84.375, Loss: 0.453712  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 58.0%, Avg loss: 1.221362 \n",
      "           Precision: 0.588, Recall: 0.115\n",
      "Epoch 12\n",
      "-------------------------------\n",
      "Accuracy: 90.625, Loss: 0.251119  [   64/  800]\n",
      "Accuracy: 84.375, Loss: 0.373820  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 70.0%, Avg loss: 0.583933 \n",
      "           Precision: 0.593, Recall: 0.989\n",
      "Epoch 13\n",
      "-------------------------------\n",
      "Accuracy: 92.1875, Loss: 0.224241  [   64/  800]\n",
      "Accuracy: 82.8125, Loss: 0.438444  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 54.5%, Avg loss: 1.281696 \n",
      "           Precision: 0.489, Recall: 1.000\n",
      "Epoch 14\n",
      "-------------------------------\n",
      "Accuracy: 85.9375, Loss: 0.310433  [   64/  800]\n",
      "Accuracy: 92.1875, Loss: 0.315762  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 55.0%, Avg loss: 2.095819 \n",
      "           Precision: 0.200, Recall: 0.011\n",
      "Epoch 15\n",
      "-------------------------------\n",
      "Accuracy: 90.625, Loss: 0.227195  [   64/  800]\n",
      "Accuracy: 90.625, Loss: 0.353017  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 83.5%, Avg loss: 0.386423 \n",
      "           Precision: 0.821, Recall: 0.793\n",
      "Epoch 16\n",
      "-------------------------------\n",
      "Accuracy: 93.75, Loss: 0.203782  [   64/  800]\n",
      "Accuracy: 81.25, Loss: 0.408644  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 56.0%, Avg loss: 2.505667 \n",
      "           Precision: 0.000, Recall: 0.000\n",
      "Epoch 17\n",
      "-------------------------------\n",
      "Accuracy: 90.625, Loss: 0.295150  [   64/  800]\n",
      "Accuracy: 84.375, Loss: 0.369796  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 56.0%, Avg loss: 1.306220 \n",
      "           Precision: 0.400, Recall: 0.023\n",
      "Epoch 18\n",
      "-------------------------------\n",
      "Accuracy: 93.75, Loss: 0.246435  [   64/  800]\n",
      "Accuracy: 78.125, Loss: 0.444177  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 60.5%, Avg loss: 1.432457 \n",
      "           Precision: 0.524, Recall: 1.000\n",
      "Epoch 19\n",
      "-------------------------------\n",
      "Accuracy: 100.0, Loss: 0.106110  [   64/  800]\n",
      "Accuracy: 90.625, Loss: 0.301327  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 87.0%, Avg loss: 0.301011 \n",
      "           Precision: 0.821, Recall: 0.897\n",
      "Epoch 20\n",
      "-------------------------------\n",
      "Accuracy: 90.625, Loss: 0.261011  [   64/  800]\n",
      "Accuracy: 90.625, Loss: 0.298108  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 68.5%, Avg loss: 0.765352 \n",
      "           Precision: 0.875, Recall: 0.322\n",
      "Epoch 21\n",
      "-------------------------------\n",
      "Accuracy: 90.625, Loss: 0.230322  [   64/  800]\n",
      "Accuracy: 92.1875, Loss: 0.244352  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 80.5%, Avg loss: 0.440970 \n",
      "           Precision: 0.800, Recall: 0.736\n",
      "Epoch 22\n",
      "-------------------------------\n",
      "Accuracy: 93.75, Loss: 0.172819  [   64/  800]\n",
      "Accuracy: 85.9375, Loss: 0.368360  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 69.0%, Avg loss: 0.772308 \n",
      "           Precision: 0.712, Recall: 0.483\n",
      "Epoch 23\n",
      "-------------------------------\n",
      "Accuracy: 89.0625, Loss: 0.245157  [   64/  800]\n",
      "Accuracy: 95.3125, Loss: 0.210674  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 51.5%, Avg loss: 1.845257 \n",
      "           Precision: 0.461, Recall: 0.678\n",
      "Epoch 24\n",
      "-------------------------------\n",
      "Accuracy: 93.75, Loss: 0.161775  [   64/  800]\n",
      "Accuracy: 81.25, Loss: 0.352529  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 79.0%, Avg loss: 0.538154 \n",
      "           Precision: 0.674, Recall: 1.000\n",
      "Epoch 25\n",
      "-------------------------------\n",
      "Accuracy: 90.625, Loss: 0.214108  [   64/  800]\n",
      "Accuracy: 98.4375, Loss: 0.191276  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 85.5%, Avg loss: 0.408336 \n",
      "           Precision: 0.750, Recall: 1.000\n",
      "Epoch 26\n",
      "-------------------------------\n",
      "Accuracy: 95.3125, Loss: 0.154381  [   64/  800]\n",
      "Accuracy: 85.9375, Loss: 0.389887  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 77.0%, Avg loss: 0.784732 \n",
      "           Precision: 0.654, Recall: 1.000\n",
      "Epoch 27\n",
      "-------------------------------\n",
      "Accuracy: 92.1875, Loss: 0.191939  [   64/  800]\n",
      "Accuracy: 92.1875, Loss: 0.207606  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 63.0%, Avg loss: 1.089600 \n",
      "           Precision: 0.540, Recall: 1.000\n",
      "Epoch 28\n",
      "-------------------------------\n",
      "Accuracy: 95.3125, Loss: 0.137425  [   64/  800]\n",
      "Accuracy: 82.8125, Loss: 0.324818  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 58.5%, Avg loss: 1.174410 \n",
      "           Precision: 0.667, Recall: 0.092\n",
      "Epoch 29\n",
      "-------------------------------\n",
      "Accuracy: 90.625, Loss: 0.166352  [   64/  800]\n",
      "Accuracy: 93.75, Loss: 0.184801  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 88.5%, Avg loss: 0.261637 \n",
      "           Precision: 0.791, Recall: 1.000\n",
      "Epoch 30\n",
      "-------------------------------\n",
      "Accuracy: 93.75, Loss: 0.135094  [   64/  800]\n",
      "Accuracy: 95.3125, Loss: 0.149030  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 56.0%, Avg loss: 1.844880 \n",
      "           Precision: 0.429, Recall: 0.034\n",
      "Epoch 31\n",
      "-------------------------------\n",
      "Accuracy: 95.3125, Loss: 0.117862  [   64/  800]\n",
      "Accuracy: 89.0625, Loss: 0.230197  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 84.0%, Avg loss: 0.570127 \n",
      "           Precision: 0.731, Recall: 1.000\n",
      "Epoch 32\n",
      "-------------------------------\n",
      "Accuracy: 93.75, Loss: 0.099660  [   64/  800]\n",
      "Accuracy: 95.3125, Loss: 0.195337  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 61.5%, Avg loss: 1.389315 \n",
      "           Precision: 0.708, Recall: 0.195\n",
      "Epoch 33\n",
      "-------------------------------\n",
      "Accuracy: 96.875, Loss: 0.082520  [   64/  800]\n",
      "Accuracy: 95.3125, Loss: 0.135303  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 90.0%, Avg loss: 0.308871 \n",
      "           Precision: 0.813, Recall: 1.000\n",
      "Epoch 34\n",
      "-------------------------------\n",
      "Accuracy: 95.3125, Loss: 0.076202  [   64/  800]\n",
      "Accuracy: 89.0625, Loss: 0.254178  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 80.5%, Avg loss: 0.539204 \n",
      "           Precision: 0.864, Recall: 0.655\n",
      "Epoch 35\n",
      "-------------------------------\n",
      "Accuracy: 98.4375, Loss: 0.072962  [   64/  800]\n",
      "Accuracy: 89.0625, Loss: 0.223270  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 86.0%, Avg loss: 0.304325 \n",
      "           Precision: 0.883, Recall: 0.782\n",
      "Epoch 36\n",
      "-------------------------------\n",
      "Accuracy: 93.75, Loss: 0.105731  [   64/  800]\n",
      "Accuracy: 92.1875, Loss: 0.170179  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 57.0%, Avg loss: 1.569291 \n",
      "           Precision: 1.000, Recall: 0.011\n",
      "Epoch 37\n",
      "-------------------------------\n",
      "Accuracy: 96.875, Loss: 0.180506  [   64/  800]\n",
      "Accuracy: 89.0625, Loss: 0.319853  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 80.0%, Avg loss: 0.468348 \n",
      "           Precision: 0.841, Recall: 0.667\n",
      "Epoch 38\n",
      "-------------------------------\n",
      "Accuracy: 90.625, Loss: 0.176669  [   64/  800]\n",
      "Accuracy: 95.3125, Loss: 0.214727  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 81.5%, Avg loss: 0.584653 \n",
      "           Precision: 0.708, Recall: 0.977\n",
      "Epoch 39\n",
      "-------------------------------\n",
      "Accuracy: 90.625, Loss: 0.133789  [   64/  800]\n",
      "Accuracy: 92.1875, Loss: 0.154165  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 88.0%, Avg loss: 0.481254 \n",
      "           Precision: 0.789, Recall: 0.989\n",
      "Epoch 40\n",
      "-------------------------------\n",
      "Accuracy: 98.4375, Loss: 0.057581  [   64/  800]\n",
      "Accuracy: 95.3125, Loss: 0.137169  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 59.0%, Avg loss: 1.550178 \n",
      "           Precision: 0.778, Recall: 0.080\n",
      "Epoch 41\n",
      "-------------------------------\n",
      "Accuracy: 92.1875, Loss: 0.149610  [   64/  800]\n",
      "Accuracy: 93.75, Loss: 0.099091  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 89.5%, Avg loss: 0.587661 \n",
      "           Precision: 0.806, Recall: 1.000\n",
      "Epoch 42\n",
      "-------------------------------\n",
      "Accuracy: 98.4375, Loss: 0.055386  [   64/  800]\n",
      "Accuracy: 95.3125, Loss: 0.106788  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 77.0%, Avg loss: 0.551968 \n",
      "           Precision: 0.918, Recall: 0.517\n",
      "Epoch 43\n",
      "-------------------------------\n",
      "Accuracy: 95.3125, Loss: 0.089324  [   64/  800]\n",
      "Accuracy: 98.4375, Loss: 0.060097  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 88.5%, Avg loss: 0.226695 \n",
      "           Precision: 0.833, Recall: 0.920\n",
      "Epoch 44\n",
      "-------------------------------\n",
      "Accuracy: 98.4375, Loss: 0.098446  [   64/  800]\n",
      "Accuracy: 93.75, Loss: 0.106019  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 85.0%, Avg loss: 0.675663 \n",
      "           Precision: 0.744, Recall: 1.000\n",
      "Epoch 45\n",
      "-------------------------------\n",
      "Accuracy: 100.0, Loss: 0.047596  [   64/  800]\n",
      "Accuracy: 92.1875, Loss: 0.230815  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 88.5%, Avg loss: 0.450181 \n",
      "           Precision: 0.791, Recall: 1.000\n",
      "Epoch 46\n",
      "-------------------------------\n",
      "Accuracy: 100.0, Loss: 0.049200  [   64/  800]\n",
      "Accuracy: 98.4375, Loss: 0.086568  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 85.5%, Avg loss: 0.347627 \n",
      "           Precision: 0.854, Recall: 0.805\n",
      "Epoch 47\n",
      "-------------------------------\n",
      "Accuracy: 96.875, Loss: 0.089471  [   64/  800]\n",
      "Accuracy: 93.75, Loss: 0.163588  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 90.5%, Avg loss: 0.286796 \n",
      "           Precision: 0.833, Recall: 0.977\n",
      "Epoch 48\n",
      "-------------------------------\n",
      "Accuracy: 95.3125, Loss: 0.079789  [   64/  800]\n",
      "Accuracy: 96.875, Loss: 0.111913  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 57.0%, Avg loss: 2.013019 \n",
      "           Precision: 0.556, Recall: 0.057\n",
      "Epoch 49\n",
      "-------------------------------\n",
      "Accuracy: 96.875, Loss: 0.067191  [   64/  800]\n",
      "Accuracy: 95.3125, Loss: 0.089574  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 67.5%, Avg loss: 1.131164 \n",
      "           Precision: 0.844, Recall: 0.310\n",
      "Epoch 50\n",
      "-------------------------------\n",
      "Accuracy: 96.875, Loss: 0.056421  [   64/  800]\n",
      "Accuracy: 95.3125, Loss: 0.118796  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 90.5%, Avg loss: 0.567866 \n",
      "           Precision: 0.827, Recall: 0.989\n",
      "Epoch 51\n",
      "-------------------------------\n",
      "Accuracy: 98.4375, Loss: 0.038246  [   64/  800]\n",
      "Accuracy: 92.1875, Loss: 0.171553  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 88.0%, Avg loss: 0.458670 \n",
      "           Precision: 0.784, Recall: 1.000\n",
      "Epoch 52\n",
      "-------------------------------\n",
      "Accuracy: 98.4375, Loss: 0.052928  [   64/  800]\n",
      "Accuracy: 95.3125, Loss: 0.113807  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 82.5%, Avg loss: 0.391092 \n",
      "           Precision: 0.882, Recall: 0.690\n",
      "Epoch 53\n",
      "-------------------------------\n",
      "Accuracy: 95.3125, Loss: 0.125121  [   64/  800]\n",
      "Accuracy: 98.4375, Loss: 0.058235  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 89.0%, Avg loss: 0.558874 \n",
      "           Precision: 0.798, Recall: 1.000\n",
      "Epoch 54\n",
      "-------------------------------\n",
      "Accuracy: 100.0, Loss: 0.023715  [   64/  800]\n",
      "Accuracy: 98.4375, Loss: 0.073507  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 86.0%, Avg loss: 0.419189 \n",
      "           Precision: 0.847, Recall: 0.828\n",
      "Epoch 55\n",
      "-------------------------------\n",
      "Accuracy: 100.0, Loss: 0.027488  [   64/  800]\n",
      "Accuracy: 100.0, Loss: 0.026861  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 84.5%, Avg loss: 0.471234 \n",
      "           Precision: 0.868, Recall: 0.759\n",
      "Epoch 56\n",
      "-------------------------------\n",
      "Accuracy: 100.0, Loss: 0.012006  [   64/  800]\n",
      "Accuracy: 100.0, Loss: 0.008822  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 83.0%, Avg loss: 0.507827 \n",
      "           Precision: 0.863, Recall: 0.724\n",
      "Epoch 57\n",
      "-------------------------------\n",
      "Accuracy: 100.0, Loss: 0.014471  [   64/  800]\n",
      "Accuracy: 100.0, Loss: 0.007385  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 57.0%, Avg loss: 2.872814 \n",
      "           Precision: 0.600, Recall: 0.034\n",
      "Epoch 58\n",
      "-------------------------------\n",
      "Accuracy: 98.4375, Loss: 0.018979  [   64/  800]\n",
      "Accuracy: 100.0, Loss: 0.013426  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 74.5%, Avg loss: 1.154716 \n",
      "           Precision: 0.929, Recall: 0.448\n",
      "Epoch 59\n",
      "-------------------------------\n",
      "Accuracy: 100.0, Loss: 0.002183  [   64/  800]\n",
      "Accuracy: 98.4375, Loss: 0.027109  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 67.5%, Avg loss: 1.809722 \n",
      "           Precision: 0.923, Recall: 0.276\n",
      "Epoch 60\n",
      "-------------------------------\n",
      "Accuracy: 100.0, Loss: 0.009196  [   64/  800]\n",
      "Accuracy: 100.0, Loss: 0.022003  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 66.5%, Avg loss: 2.165362 \n",
      "           Precision: 0.917, Recall: 0.253\n",
      "Epoch 61\n",
      "-------------------------------\n",
      "Accuracy: 100.0, Loss: 0.006062  [   64/  800]\n",
      "Accuracy: 100.0, Loss: 0.003515  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 86.5%, Avg loss: 0.650821 \n",
      "           Precision: 0.841, Recall: 0.851\n",
      "Epoch 62\n",
      "-------------------------------\n",
      "Accuracy: 98.4375, Loss: 0.029996  [   64/  800]\n",
      "Accuracy: 98.4375, Loss: 0.018563  [  704/  800]\n",
      "Test Error: \n",
      " Accuracy: 79.0%, Avg loss: 0.890160 \n",
      "           Precision: 0.959, Recall: 0.540\n",
      "Epoch 63\n",
      "-------------------------------\n",
      "Accuracy: 98.4375, Loss: 0.023546  [   64/  800]\n"
     ]
    },
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[6], line 10\u001b[0m\n\u001b[1;32m      7\u001b[0m classifier \u001b[38;5;241m=\u001b[39m models\u001b[38;5;241m.\u001b[39mResNet2D(models\u001b[38;5;241m.\u001b[39mResidualBlock2D, [\u001b[38;5;241m3\u001b[39m, \u001b[38;5;241m4\u001b[39m, \u001b[38;5;241m6\u001b[39m, \u001b[38;5;241m3\u001b[39m], in_channels\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m18\u001b[39m, num_classes\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m)\n\u001b[1;32m      8\u001b[0m classifier \u001b[38;5;241m=\u001b[39m classifier\u001b[38;5;241m.\u001b[39mto(device\u001b[38;5;241m=\u001b[39mDEVICE, dtype\u001b[38;5;241m=\u001b[39mdtype)\n\u001b[0;32m---> 10\u001b[0m \u001b[43mbranch_classifier\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mtrain\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtraining_dataloader\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mtest_dataloader\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mout_dir\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mlr\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mepochs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mclassifier\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mstate_dict\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\n",
      "File \u001b[0;32m~/neurotrack/notebooks/../solvers/branch_classifier.py:268\u001b[0m, in \u001b[0;36mtrain\u001b[0;34m(train_dataloader, test_dataloader, out_dir, lr, epochs, classifier, state_dict)\u001b[0m\n\u001b[1;32m    266\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m i,t \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(\u001b[38;5;28mrange\u001b[39m(epochs)):\n\u001b[1;32m    267\u001b[0m     \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mEpoch \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mt\u001b[38;5;241m+\u001b[39m\u001b[38;5;241m1\u001b[39m\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m-------------------------------\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[0;32m--> 268\u001b[0m     \u001b[43mtrain_loop\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtrain_dataloader\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mclassifier\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbinary_loss\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mclassifier_optimizer\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    269\u001b[0m     test_loop(test_dataloader, classifier, binary_loss)\n\u001b[1;32m    270\u001b[0m     torch\u001b[38;5;241m.\u001b[39msave(classifier\u001b[38;5;241m.\u001b[39mstate_dict(), os\u001b[38;5;241m.\u001b[39mpath\u001b[38;5;241m.\u001b[39mjoin(out_dir, \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mresnet_classifier_\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mdate\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m_checkpoint-\u001b[39m\u001b[38;5;132;01m{\u001b[39;00mi\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m.pt\u001b[39m\u001b[38;5;124m\"\u001b[39m))\n",
      "File \u001b[0;32m~/neurotrack/notebooks/../solvers/branch_classifier.py:125\u001b[0m, in \u001b[0;36mtrain_loop\u001b[0;34m(dataloader, model, loss_fn, optimizer)\u001b[0m\n\u001b[1;32m    122\u001b[0m model\u001b[38;5;241m.\u001b[39mtrain()\n\u001b[1;32m    123\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m batch, (X,y) \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28menumerate\u001b[39m(dataloader):\n\u001b[1;32m    124\u001b[0m     \u001b[38;5;66;03m# out = model(X[:,:3].to(device=DEVICE))\u001b[39;00m\n\u001b[0;32m--> 125\u001b[0m     out \u001b[38;5;241m=\u001b[39m model(\u001b[43mX\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mto\u001b[49m\u001b[43m(\u001b[49m\u001b[43mdevice\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mDEVICE\u001b[49m\u001b[43m,\u001b[49m\u001b[43mdtype\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mtorch\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mfloat32\u001b[49m\u001b[43m)\u001b[49m)\n\u001b[1;32m    126\u001b[0m     out \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mnn\u001b[38;5;241m.\u001b[39mfunctional\u001b[38;5;241m.\u001b[39msigmoid(out\u001b[38;5;241m.\u001b[39msqueeze())\n\u001b[1;32m    127\u001b[0m     \u001b[38;5;66;03m# out = torch.nn.functional.softmax(out, dim=1)\u001b[39;00m\n\u001b[1;32m    128\u001b[0m     \u001b[38;5;66;03m# y = torch.nn.functional.one_hot(y, num_classes=3)\u001b[39;00m\n",
      "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "out_dir = \"classifier_weights/\"\n",
    "if not os.path.exists(out_dir):\n",
    "    os.makedirs(out_dir, exist_ok=True)\n",
    "\n",
    "lr = 1e-3\n",
    "epochs = 100\n",
    "classifier = models.ResNet2D(models.ResidualBlock2D, [3, 4, 6, 3], in_channels=18, num_classes=1)\n",
    "classifier = classifier.to(device=DEVICE, dtype=dtype)\n",
    "\n",
    "branch_classifier.train(training_dataloader, test_dataloader, out_dir, lr, epochs, classifier, state_dict=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Save sample patches and labels from image files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# save sample patches from the images centered at the sample points\n",
    "# image_dir = \"/home/brysongray/data/simulated_neurons/neuromorpho_sub1_with_artifacts\"\n",
    "image_dir = \"/home/brysongray/\"\n",
    "out_dir = \"classifier_data\"\n",
    "if not os.path.exists(out_dir):\n",
    "    os.makedirs(out_dir, exist_ok=True)\n",
    "name = \"neuromorpho_test\"\n",
    "\n",
    "collect.collect_data(sample_points, image_dir, out_dir, name, date)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### View some example input images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "observations = os.listdir(os.path.join(out_dir, \"observations\"))\n",
    "training_annotations = pd.read_csv(glob(os.path.join(out_dir, \"*_labels.csv\"))[0])\n",
    "ids = np.random.choice(len(training_annotations), size=9)\n",
    "sample = training_annotations.iloc[ids]\n",
    "\n",
    "fig, ax = plt.subplots(3,3)\n",
    "ax = ax.flatten()\n",
    "for i in range(len(ax)):\n",
    "    img = torch.load(os.path.join(out_dir,\"observations\", sample.iloc[i,0]), weights_only=True) # type: ignore\n",
    "    ax[i].imshow(img[0].amax(0))\n",
    "    ax[i].set_title(f\"label: {sample.iloc[i,1].item()}\")\n",
    "    ax[i].set_axis_off()\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Train branch classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Instantiate dataloader for training and test datasets\n",
    "Dataloaders use a weighted random sampler to balance classes. Additionally, the training dataset\\\n",
    " adds a random permutation and flip to the image patch at retrieval."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# set source data files paths\n",
    "training_labels_file = \"classifier_data/branch_classifier_neuromorpho_test_02-07-25_test_labels.csv\"\n",
    "test_labels_file = \"classifier_data/branch_classifier_neuromorpho_test_02-07-25_training_labels.csv\"\n",
    "img_dir = \"classifier_data/observations\"\n",
    "\n",
    "# instantiate training and test datasets\n",
    "transform = branch_classifier.transform # random permutation and flip\n",
    "training_data = branch_classifier.StateData(labels_file=training_labels_file,\n",
    "                          img_dir=img_dir,\n",
    "                          transform=transform)\n",
    "test_data = branch_classifier.StateData(labels_file=test_labels_file,\n",
    "                          img_dir=img_dir)\n",
    "\n",
    "# instantiate dataloaders\n",
    "training_dataloader = branch_classifier.init_dataloader(training_data)\n",
    "test_dataloader = branch_classifier.init_dataloader(test_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## View balanced data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 9 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(3,3)\n",
    "axs = axs.flatten()\n",
    "\n",
    "X,y = next(iter(training_dataloader))\n",
    "for i, ax in enumerate(axs):\n",
    "    ax.imshow(X[i,0].amax(0))\n",
    "    ax.set_title(f\"Label: {y[i]}\")\n",
    "    ax.set_axis_off()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1\n",
      "-------------------------------\n",
      "Accuracy: 40.0, Loss: 0.405724  [   30/   30]\n",
      "Test Error: \n",
      " Accuracy: 50.0%, Avg loss: 24.919770 \n",
      "           Precision: 0.500, Recall: 1.000\n",
      "Epoch 2\n",
      "-------------------------------\n",
      "Accuracy: 76.66666666666667, Loss: 0.828855  [   30/   30]\n",
      "Test Error: \n",
      " Accuracy: 53.3%, Avg loss: 22.108765 \n",
      "           Precision: 0.533, Recall: 1.000\n",
      "Epoch 3\n",
      "-------------------------------\n",
      "Accuracy: 80.0, Loss: 0.543504  [   30/   30]\n",
      "Test Error: \n",
      " Accuracy: 51.7%, Avg loss: 23.350894 \n",
      "           Precision: 0.517, Recall: 1.000\n",
      "Epoch 4\n",
      "-------------------------------\n",
      "Accuracy: 70.0, Loss: 0.260397  [   30/   30]\n",
      "Test Error: \n",
      " Accuracy: 42.5%, Avg loss: 32.415985 \n",
      "           Precision: 0.425, Recall: 1.000\n",
      "Epoch 5\n",
      "-------------------------------\n",
      "Accuracy: 93.33333333333333, Loss: 0.181836  [   30/   30]\n",
      "Test Error: \n",
      " Accuracy: 48.3%, Avg loss: 26.552392 \n",
      "           Precision: 0.483, Recall: 1.000\n",
      "Done!\n"
     ]
    }
   ],
   "source": [
    "out_dir = \"classifier_weights/\"\n",
    "if not os.path.exists(out_dir):\n",
    "    os.makedirs(out_dir, exist_ok=True)\n",
    "\n",
    "lr = 1e-3\n",
    "epochs = 5\n",
    "classifier = models.ResNet(models.ResidualBlock, [3, 4, 6, 3], num_classes=1)\n",
    "classifier = classifier.to(device=DEVICE, dtype=dtype)\n",
    "\n",
    "branch_classifier.train(training_dataloader, test_dataloader, out_dir, lr, epochs, classifier, state_dict=None)\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "tractography",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
